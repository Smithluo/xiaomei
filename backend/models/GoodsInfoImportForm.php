<?php
/**
 * Created by PhpStorm.
 * User: root
 * Date: 16-9-29
 * Time: 下午6:56
 */
namespace backend\models;

use \Yii;
use yii\base\Model;
use yii\web\ServerErrorHttpException;
use common\models\GoodsAttr;
use common\models\VolumePrice;

class GoodsInfoImportForm extends Model
{
    public $file;

    public function attributeLabels()
    {
        return [
            'file' => '商品数据导入（excel文件）'
        ]; // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return [
            [['file'], 'file', 'skipOnEmpty' => false],
        ];
    }

    /**
     * 商品信息导入
     * @return bool
     * @throws ServerErrorHttpException
     */
    public function import() {
        if($this->validate()) {
            if ($this->file->extension != 'xlsx' && $this->file->extension != 'xls') {
                return false;
            }
            $time = date('Ymd-His');
            $filePath = 'uploads/' . $time . $this->file->baseName . '.' . $this->file->extension;
            $this->file->saveAs('uploads/' . $time . $this->file->baseName . '.' . $this->file->extension);
            $data = \moonland\phpexcel\Excel::import($filePath);

            if(!empty($data)) {
                $wrong = [];
                $wrong_message = '';
                foreach ($data as $goodsInfo) {
                    $wrong_str = '';
                    if(empty($goodsInfo['goods_id'])
                        || !is_numeric($goodsInfo['goods_id'])
                        || $goodsInfo['goods_id'] < 1
                    ) {
                        continue;
                    }

                    $goods = Goods::findOne(['goods_id' => $goodsInfo['goods_id']]);
                    if (empty($goods)) {
                        $wrong_str .= 'ID为'.$goodsInfo['goods_id'].'的商品不存在，请检查';
                        continue;
                    }
                    //  逐条处理数据 商品属性的 产地、功效、阶梯价格 应先删除后修改
                    $volume_update_arr = [];
                    $attr_update_arr = [];

                    foreach ($goodsInfo as $key => $value) {
                        $key = trim($key);
                        $value = trim($value);

                        if (!$goodsInfo['goods_id'] || !is_numeric($goodsInfo['goods_id'])) {
                            continue;
                        }

                        switch ($key) {
                            case 'goods_name':
                                $goods->$key = $value;
                                break;
                            case 'keywords':
                                $value = str_replace('，', ' ', $value);
                                $value = str_replace(',', ' ', $value);
                                $goods->$key = $value;
                                break;
                            case 'is_on_sale':
                                if (in_array($value, [0, 1])) {
                                    $goods->$key = $value;
                                } else {
                                    $wrong_str .= '上下架只能填 0 或 1;';
                                }
                                break;
                            case 'number_per_box':
                                if (is_numeric($value) && $value > 0 && $value <= 65535) {
                                    $goods->$key = ceil($value);
                                } else {
                                    $wrong_str .= '小箱数number_per_box必须是65535以内的正整数;';
                                }
                                break;
                            case 'qty':
                                if (is_numeric($value) && $value > 0 && $value <= 65535) {
                                    $goods->$key = ceil($value);
                                } else {
                                    $wrong_str .= '装箱数qty必须是65535以内的正整数;';
                                }
                                break;
                            case 'goods_sn':
                                if (!empty($value)) {
                                    $goods->$key = $value;
                                } else {
                                    $wrong_str .= '货号为空;';
                                }
                                break;
                            case 'certificate':
                                if (!empty($value)) {
                                    $goods->$key = $value;
                                } else {
                                    $wrong_str .= '证件号为空;';
                                }
                                break;
                            case 'goods_number':
                                if (is_numeric($value) && $value >= 0 && $value <= 65535) {
                                    $goods->$key = ceil($value);
                                } else {
                                    $wrong_str .= '库存必须是65535以内的正整数;';
                                }
                                break;
                            case 'measure_unit':
                                if (!empty($value)) {
                                    $goods->$key = $value;
                                } else {
                                    $wrong_str .= '单位为空;';
                                }
                                break;
                            case 'start_num':
                                if (is_numeric($value) && $value > 0 && $value <= 255) {
                                    $goods->$key = ceil($value);
                                } else {
                                    $wrong_str .= '起售数量必须是255以内的正整数;';
                                }
                                break;
                            case 'shop_price':
                                if (is_numeric($value) && $value > 0 && $value < 100000000) {
                                    $goods->$key = $value;
                                } else {
                                    $wrong_str .= '本店售价必须是100000000以内的正数;';
                                }
                                break;
                            case 'market_price':
                                if (is_numeric($value) && $value > 0 && $value < 100000000) {
                                    $goods->$key = $value;
                                } else {
                                    $wrong_str .= '市场价必须是100000000以内的正数;';
                                }
                                break;
                            case 'shipping_id':
                                if (in_array($value, [0, 2, 3])) {
                                    $goods->$key = $value;
                                } else {
                                    $wrong_str .= 'shipping_id只能填 0, 2, 3;';
                                }
                                break;
                            case 'discount_disable':
                                if (in_array($value, [0, 1])) {
                                    $goods->$key = $value;
                                } else {
                                    $wrong_str .= 'discount_disable只能填 0 或 1;';
                                }
                                break;
                            case 'goods_weight':
                                //  重量格式应该是 整数或浮点数
                                if (!is_numeric($value) && !is_float($value)) {
                                    $wrong_str .= '第三梯度的商品价格应不大于本店售价（第二梯度价格）;';
                                } elseif ($value > 0) {
                                    $goods->$key = $value;
                                }
                                break;
                            case 'spu_id':
                                if (!is_numeric($value)) {
                                    $wrong_str .= 'spu_id必须是数字;';
                                } else {
                                    $goods->$key = $value;
                                }
                                break;
                            case 'sku_size':
                                if (empty($value)) {
                                    $wrong_str .= '商品规格不能为空;';
                                } else {
                                    $goods->$key = $value;
                                }
                                break;
                            case 'region':
                                if (!empty($value)) {
                                    $attr_update_arr['region'] = $value;
                                } else {
                                    $wrong_str .= '产地为空;';
                                }
                                break;
                            case 'effect':
                                if (!empty($value)) {
                                    $attr_update_arr['effect'] = $value;
                                } else {
                                    $wrong_str .= '功效为空;';
                                }
                                break;

                            case 'volume_number_1':
                                if (is_numeric($value) && $value > $goodsInfo['start_num'] && $value <= 65535) {
                                    $volume_update_arr['volume_number_1'] = $value;
                                } elseif ($value > 0) {
                                    $wrong_str .= '第二梯度订购量应大于起售数量;';
                                }
                                break;
                            case 'volume_price_1':
                                if (is_numeric($value) && $value <= $goodsInfo['shop_price']) {
                                    $volume_update_arr['volume_price_1'] = $value;
                                } elseif ($value > 0) {
                                    $wrong_str .= '第二梯度的商品价格应不大于本店售价（第一梯度价格）;';
                                }
                                break;
                            case 'volume_number_2':
                                if (is_numeric($value) && $value > $goodsInfo['volume_number_1'] && $value <= 65535) {
                                    $volume_update_arr['volume_number_2'] = $value;
                                } elseif ($value > 0) {
                                    $wrong_str .= '第三梯度订购量应大于第二梯度订购量;';
                                }
                                break;
                            case 'volume_price_2':
                                if (is_numeric($value) && $value <= $goodsInfo['volume_price_1']) {
                                    $volume_update_arr['volume_price_2'] = $value;
                                } elseif ($value > 0) {
                                    $wrong_str .= '第三梯度的商品价格应不大于本店售价（第二梯度价格）;';
                                }
                                break;

                            default :
                                break;
                        }
                    }
                    $goods->save();
                    //  入库报错也提醒出来
                    if ($goods->hasErrors()) {
                        $err = $goods->getErrors();
                        foreach ($err as $item => $err_msg) {
                            foreach ($err_msg as $msg) {
                                $wrong_str .= $item.$msg;
                            }
                        }
                    }

                    if ($wrong_str) {
                        $wrong[] = '商品ID为'.$goodsInfo['goods_id'].'的部分数据不规范，未完全导入:'.$wrong_str;
                    }

                    if (!empty($attr_update_arr)) {
                        foreach ($attr_update_arr as $type => $attr) {
                            if ($type == 'region') {
                                $attr_id = 165;
                            } elseif ($type == 'effect') {
                                $attr_id = 211;
                            }
                            $del_sql = ' DELETE FROM '.GoodsAttr::tableName().
                                ' WHERE goods_id = '.$goodsInfo['goods_id'].
                                ' AND attr_id = '.$attr_id;
                            Yii::$app->db->createCommand($del_sql)->execute();

                            $insert_sql = ' INSERT INTO '.GoodsAttr::tableName().
                                ' (goods_id, attr_id, attr_value, attr_price) VALUES '.
                                ' ('.$goodsInfo['goods_id'].', '.$attr_id.", '".$attr."', 0) ";
                            Yii::$app->db->createCommand($insert_sql)->execute();
                        }
                    }

                    if (!empty($volume_update_arr)) {
                        $del_sql = ' DELETE FROM '.VolumePrice::tableName().
                            ' WHERE goods_id = '.$goodsInfo['goods_id'];

                        Yii::$app->db->createCommand($del_sql)->execute();

                        if (isset($volume_update_arr['volume_number_1']) && isset($volume_update_arr['volume_price_1'])) {
                            $insert_sql = ' INSERT INTO '.VolumePrice::tableName().
                                ' (price_type, goods_id, volume_number, volume_price) VALUES '.
                                ' (1, '.
                                $goodsInfo['goods_id'].', '.
                                $volume_update_arr['volume_number_1'].', '.
                                $volume_update_arr['volume_price_1'].
                                ') ';

                            Yii::$app->db->createCommand($insert_sql)->execute();
                        }

                        if (isset($volume_update_arr['volume_number_2']) && isset($volume_update_arr['volume_price_2'])) {
                            $insert_sql = ' INSERT INTO '.VolumePrice::tableName().
                                ' (price_type, goods_id, volume_number, volume_price) VALUES '.
                                ' (1, '.
                                $goodsInfo['goods_id'].', '.
                                $volume_update_arr['volume_number_2'].', '.
                                $volume_update_arr['volume_price_2'].
                                ') ';
                            Yii::$app->db->createCommand($insert_sql)->execute();
                        }
                    }

                }

                //  正确的数据完全导入后再处理异常数据的显示
                if ($wrong) {
                    foreach ($wrong as $str) {
                        $wrong_message .= $str.PHP_EOL;
                    }
                }
                if ($wrong_message) {
                    throw new ServerErrorHttpException($wrong_message);
                }
            }
            else {
                unlink($filePath);
                return false;
            }
            unlink($filePath);
            return true;
        }
        return false;
    }

    public function importGoodsInfo()
    {
        if($this->validate()) {
            if ($this->file->extension != 'xlsx' && $this->file->extension != 'xls') {
                return false;
            }
            $filePath = 'uploads/' . $this->file->baseName . '.' . $this->file->extension;
            $this->file->saveAs('uploads/' . $this->file->baseName . '.' . $this->file->extension);
            $data = \moonland\phpexcel\Excel::import($filePath);
            if(!empty($data)) {
                foreach ($data as $goodsInfo) {
                    if (!empty($goodsInfo['goods_id'])) {
                        $model = Goods::find()->where([
                                'goods_id'=>$goodsInfo['goods_id']
                            ])->one();
                        $model->cat_id = $goodsInfo['cat_id'];
                        $model->save();
                    }
                }
            }
            else {
                unlink($filePath);
                return false;
            }
            unlink($filePath);
            return true;
        }
        Yii::$app->session->setFlash('error', VarDumper::export($this->errors));
        return false;
    }
}