<?php

namespace service\models;

use backend\models\OrderInfo;
use common\models\OrderGroup;
use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use service\models\Users;
use common\helper\DateTimeHelper;

/**
 * UsersSearch represents the model behind the search form about `common\models\Users`.
 */
class UsersSearch extends Users
{
    public $consignee;
    public $mobile;
    public $total_amount;
    public $last_order_time;
    public $servicer_user_name;
    //服务商所属区域
    public $citycode;

    public function attributeLabels()
    {
        $result = array_merge(parent::attributeLabels(),
            [
                'consignee'=>'联系人姓名',
                'mobile'=>'联系人电话',
                'servicer_user_name'=>'业务员姓名',
                'company_name'=>'门店名称',
                'total_amount'=>'交易总额',
            ]
        ); // TODO: Change the autogenerated stub

        $result['user_id'] = '门店ID';

        return $result;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'sex', 'pay_points', 'rank_points', 'address_id', 'zone_id', 'reg_time', 'last_login', 'visit_count', 'user_rank', 'is_special', 'parent_id', 'flag', 'is_validated', 'servicer_user_id', 'servicer_super_id', 'servicer_info_id', 'servicer_super_id', 'bank_info_id'], 'integer'],
            [['user_id', 'company_name', 'user_name', 'mobile_phone', 'servicer_user_name','citycode'], 'safe'],
            [['user_money', 'frozen_money', 'credit_line'], 'number'],
            [['user_id', 'company_name', 'user_name', 'mobile_phone', 'servicer_user_name'], 'filter', 'filter'=>'trim'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = Users::find();

//        $query->joinWith('defaultAddress');
        $query->joinWith([
            'servicerUser su',
            'orderInfo orderInfo' => function($query) {
            $query->andOnCondition([
                'orderInfo.order_status' => [
                    OrderInfo::ORDER_STATUS_REALLY_DONE,
                ],
                'orderInfo.pay_status' => [
                    OrderInfo::PAY_STATUS_PAYED,
                ],
                'orderInfo.shipping_status' => [
                    OrderInfo::SHIPPING_STATUS_RECEIVED,
                ],
            ]);
        }]);

        $query->with('lastOrder');

        $query->addSelect([
            Users::tableName().'.user_id',
            Users::tableName().'.company_name',
            Users::tableName().'.user_rank',
            Users::tableName().'.user_name',
            Users::tableName().'.mobile_phone',
            Users::tableName().'.reg_time',
            'su.nickname' ,
            'Sum(orderInfo.goods_amount) as total_amount ,
            Sum(orderInfo.discount) as total_discount'
        ]);

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => Yii::$app->params['gridPageSize'],
            ],
        ]);

//        $dataProvider->setSort([
//            'attributes' => [
//                'user_id' => [
//                    'asc' => ['user_id' => SORT_ASC],
//                    'desc' => ['user_id' => SORT_DESC],
//                    'label' => '门店ID',
//                ],
//                'company_name' => [
//                    'asc' => ['company_name' => SORT_ASC],
//                    'desc' => ['company_name' => SORT_DESC],
//                    'label' => '门店名称',
//                ],
//                'consignee' => [
//                    'asc' => ['o_user_address.consignee' => SORT_ASC],
//                    'desc' => ['o_user_address.consignee' => SORT_DESC],
//                    'label' => '联系人',
//                ],
//                'mobile' => [
//                    'asc' => ['o_user_address.mobile' => SORT_ASC],
//                    'desc' => ['o_user_address.mobile' => SORT_DESC],
//                    'label' => '联系电话',
//                ],
//            ]
//        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            $query->where('0=1');
            return $dataProvider;
        }

        //  过滤 特殊渠道的用户 不显示在服务商的门店列表中
        $query->andWhere([
            'OR',
            ['not in', 'o_users.channel', Yii::$app->params['spec_channel']],
            ['o_users.channel' => NULL]
        ]);

        // grid filtering conditions
        $query->andFilterWhere([
            'o_users.user_id' => $this->user_id,
            'o_users.sex' => $this->sex,
            'o_users.birthday' => $this->birthday,
            'o_users.user_money' => $this->user_money,
            'o_users.frozen_money' => $this->frozen_money,
            'o_users.pay_points' => $this->pay_points,
            'o_users.rank_points' => $this->rank_points,
            'o_users.address_id' => $this->address_id,
            'o_users.zone_id' => $this->zone_id,
            'o_users.reg_time' => $this->reg_time,
            'o_users.last_login' => $this->last_login,
            'o_users.last_time' => $this->last_time,
            'o_users.visit_count' => $this->visit_count,
            'o_users.user_rank' => $this->user_rank,
            'o_users.is_special' => $this->is_special,
            'o_users.parent_id' => $this->parent_id,
            'o_users.flag' => $this->flag,
            'o_users.is_validated' => $this->is_validated,
            'o_users.credit_line' => $this->credit_line,
            'o_users.servicer_super_id' => $this->servicer_super_id,
            'o_users.servicer_info_id' => $this->servicer_info_id,
            'o_users.bank_info_id' => $this->bank_info_id,
        ]);

        //业务员，筛选跟自己绑定的零售店
        if (Yii::$app->user->can('service_saleman')) {
            $query->andFilterWhere([
                'o_users.servicer_user_id' => Yii::$app->user->identity['user_id'],
            ]);
        }
        //服务商，筛选绑定了自己业务员的所有零售店
        else if (Yii::$app->user->can('service_boss')) {
            $query->andFilterWhere([
                'su.servicer_super_id' => Yii::$app->user->identity['user_id'],
            ]);
        }
        //经理
        elseif(Yii::$app->user->can('service_manager'))
        {
            $query->andFilterWhere([
                'su.servicer_super_id' => Yii::$app->user->identity['servicer_super_id']
            ]);
        }
        else {
            Yii::error('服务商缺少权限service_boss和service_saleman', __METHOD__);
            return false;
        }

        $query->andFilterWhere(['like', 'o_users.email', $this->email])
            ->andFilterWhere(['like', 'o_users.user_name', $this->user_name])
            ->andFilterWhere(['like', 'o_users.password', $this->password])
            ->andFilterWhere(['like', 'o_users.question', $this->question])
            ->andFilterWhere(['like', 'o_users.answer', $this->answer])
            ->andFilterWhere(['like', 'o_users.last_ip', $this->last_ip])
            ->andFilterWhere(['like', 'o_users.ec_salt', $this->ec_salt])
            ->andFilterWhere(['like', 'o_users.salt', $this->salt])
            ->andFilterWhere(['like', 'o_users.alias', $this->alias])
            ->andFilterWhere(['like', 'o_users.msn', $this->msn])
            ->andFilterWhere(['like', 'o_users.qq', $this->qq])
            ->andFilterWhere(['like', 'o_users.office_phone', $this->office_phone])
            ->andFilterWhere(['like', 'o_users.home_phone', $this->home_phone])
            ->andFilterWhere(['like', 'o_users.mobile_phone', $this->mobile_phone])
            ->andFilterWhere(['like', 'o_users.company_name', $this->company_name])
            ->andFilterWhere(['like', 'o_users.passwd_question', $this->passwd_question])
            ->andFilterWhere(['like', 'o_users.passwd_answer', $this->passwd_answer])
            ->andFilterWhere(['like', 'o_users.headimgurl', $this->headimgurl])
            ->andFilterWhere(['like', 'o_users.openid', $this->openid])
            ->andFilterWhere(['like', 'o_users.qq_open_id', $this->qq_open_id])
            ->andFilterWhere(['like', 'o_users.aite_id', $this->aite_id])
            ->andFilterWhere(['like', 'o_users.unionid', $this->unionid])
            ->andFilterWhere(['like', 'o_users.wx_pc_openid', $this->wx_pc_openid])
            ->andFilterWhere(['like', 'o_users.licence_image', $this->licence_image])
            ->andFilterWhere(['like', 'o_users.brand_id_list', $this->brand_id_list])
            ->andFilterWhere(['like', 'o_users.auth_key', $this->auth_key])
            ->andFilterWhere(['like', 'o_users.access_token', $this->access_token])
            ->andFilterWhere(['like', 'o_user_address.consignee', $this->consignee])
            ->andFilterWhere(['like', 'o_user_address.mobile', $this->mobile])
            ->andFilterWhere(['like', 'su.nickname', $this->servicer_user_name])
        ;

        $query->groupBy(Users::tableName().'.user_id');

        return $dataProvider;
    }
}
