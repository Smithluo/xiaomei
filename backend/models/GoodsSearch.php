<?php

namespace backend\models;

use common\helper\NumberHelper;
use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use backend\models\Goods;
use yii\helpers\ArrayHelper;

/**
 * GoodsSearch represents the model behind the search form about `backend\models\Goods`.
 */
class GoodsSearch extends Goods
{

    public $starTag = false;

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['goods_id', 'cat_id', 'click_count', 'brand_id', 'goods_number', 'number_per_box', 'promote_start_date', 'promote_end_date', 'warn_number', 'is_real', 'is_on_sale', 'is_alone_sale', 'is_shipping', 'integral', 'add_time', 'sort_order', 'is_delete', 'is_best', 'is_new', 'is_hot', 'is_spec', 'is_promote', 'bonus_type_id', 'last_update', 'goods_type', 'give_integral', 'rank_integral', 'suppliers_id', 'is_check', 'servicer_strategy_id', 'supplier_user_id', 'spu_id', 'buy_by_box'], 'integer'],
            [['goods_sn', 'goods_name', 'goods_name_style', 'provider_name', 'measure_unit', 'keywords', 'goods_brief', 'goods_desc', 'goods_thumb', 'goods_img', 'original_img', 'extension_code', 'seller_note', 'children', 'shelf_life', 'discount_disable', 'starTag', 'prefix', 'sku_size'], 'safe'],
            [['goods_weight', 'market_price', 'shop_price', 'min_price', 'promote_price'], 'number'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(), [
            'starTag' => '是否明星单品',
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = Goods::find();

        $query->joinWith('shipping')->joinWith('brand');
        $query->joinWith('supplierUser');
//        $query->joinWith('tags tags');
        $query->joinWith('tagStar tagStar');
        $query->joinWith('goodsAttrRegion goodsAttrRegion');
        $query->joinWith('goodsAttrSample goodsAttrSample');
        $query->joinWith('goodsAttrEffect goodsAttrEffect');

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

        $attributes = $dataProvider->getSort()->attributes;
        $attributes = ArrayHelper::merge($attributes, [
            'goodsSample' => [
                'asc' => ['goodsAttrSample.attr_value' => SORT_ASC],
                'desc' => ['goodsAttrSample.attr_value' => SORT_DESC],
                'label' => '物料配比'
            ],
            'goodsRegion' => [
                'asc' => ['goodsAttrRegion.attr_value' => SORT_ASC],
                'desc' => ['goodsAttrRegion.attr_value' => SORT_DESC],
                'label' => '产地'
            ],
            'goodsEffect' => [
                'asc' => ['goodsAttrEffect.attr_value' => SORT_ASC],
                'desc' => ['goodsAttrEffect.attr_value' => SORT_DESC],
                'label' => '功效'
            ],
        ]);

        $dataProvider->setSort([
            'attributes' => $attributes,
        ]);


        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        //  默认显示未删除的商品
        if (!isset($this->is_delete)) {
            $this->is_delete = 0;
        }
        //  默认显示已上架的商品
        if (!isset($this->is_on_sale)) {
            $this->is_on_sale = 1;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            Goods::tableName().'.goods_id' => $this->goods_id,
            Goods::tableName().'.cat_id' => $this->cat_id,
            'click_count' => $this->click_count,
            Goods::tableName().'.brand_id' => $this->brand_id,
            'goods_number' => $this->goods_number,
            'number_per_box' => $this->number_per_box,
            'buy_by_box' => $this->buy_by_box,
            'goods_weight' => $this->goods_weight,
            'market_price' => $this->market_price,
            'shop_price' => $this->shop_price,
            'min_price' => $this->min_price,
            'promote_price' => $this->promote_price,
            'promote_start_date' => $this->promote_start_date,
            'promote_end_date' => $this->promote_end_date,
            'warn_number' => $this->warn_number,
            'is_real' => $this->is_real,
            'is_on_sale' => $this->is_on_sale,
            'is_alone_sale' => $this->is_alone_sale,
            'is_shipping' => $this->is_shipping,
            'integral' => $this->integral,
            'add_time' => $this->add_time,
            'sort_order' => $this->sort_order,
            'is_delete' => $this->is_delete,
            'is_best' => $this->is_best,
            'is_new' => $this->is_new,
            'is_hot' => $this->is_hot,
            'is_spec' => $this->is_spec,
            'is_promote' => $this->is_promote,
            'bonus_type_id' => $this->bonus_type_id,
            'last_update' => $this->last_update,
            'goods_type' => $this->goods_type,
            'give_integral' => $this->give_integral,
            'rank_integral' => $this->rank_integral,
            'suppliers_id' => $this->suppliers_id,
            'prefix' => $this->prefix,
            'spu_id' => $this->spu_id,
            Goods::tableName().'.supplier_user_id' => $this->supplier_user_id,
            'is_check' => $this->is_check,
            'discount_disable' => $this->discount_disable,
            Goods::tableName().'.servicer_strategy_id' => $this->servicer_strategy_id,
        ]);

        $query->andFilterWhere(['like', 'goods_sn', $this->goods_sn])
            ->andFilterWhere(['like', 'goods_name', $this->goods_name])
            ->andFilterWhere(['like', 'goods_name_style', $this->goods_name_style])
            ->andFilterWhere(['like', 'provider_name', $this->provider_name])
            ->andFilterWhere(['like', 'measure_unit', $this->measure_unit])
            ->andFilterWhere(['like', 'keywords', $this->keywords])
            ->andFilterWhere(['like', 'goods_brief', $this->goods_brief])
            ->andFilterWhere(['like', 'goods_desc', $this->goods_desc])
            ->andFilterWhere(['like', 'goods_thumb', $this->goods_thumb])
            ->andFilterWhere(['like', 'goods_img', $this->goods_img])
            ->andFilterWhere(['like', 'original_img', $this->original_img])
            ->andFilterWhere(['like', 'extension_code', $this->extension_code])
            ->andFilterWhere(['like', 'seller_note', $this->seller_note])
            ->andFilterWhere(['like', 'children', $this->children])
            ->andFilterWhere(['like', 'sku_size', $this->sku_size])
            ->andFilterWhere(['like', 'shelf_life', $this->shelf_life]);

        if ($this->starTag) {
            $query->andFilterWhere([
                'tagStar.name' => '明星单品',
            ]);
        }

        $query->distinct(Goods::tableName().'.goods_id');
        return $dataProvider;
    }

    public function export($params) {

        if(Yii::$app->request->isPost) {
            $rankId = Yii::$app->request->post('rank');
        }
        else if (Yii::$app->request->isGet) {
            $rankId = Yii::$app->request->get('rank');
        }
        else {
            die('会员级别未知');
        }

        $query = Goods::find()->select([
            'o_goods.goods_id',
            'o_goods.goods_sn',
            'o_goods.prefix',
            'o_goods.goods_name',
            'o_goods.click_count',
            'o_goods.is_on_sale',
            'o_goods.is_delete',
            'o_goods.start_num',
            'o_goods.market_price',
            'o_goods.shop_price',
            'o_goods.brand_id',
            'o_goods.certificate',
            'o_goods.number_per_box',
            'o_goods.discount_disable',
            'o_goods.goods_number',
            'o_goods.measure_unit',
            'o_goods.qty',
            'o_category.cat_name AS cat_name',
            'o_brand.brand_name AS brand_name',
            'servicerStrategy.percent_total AS dividePercent',
            'brandServicerStrategy.percent_total AS parentDividePercent',
        ]);

        $query->joinWith('category')
            ->joinWith('brand')
            ->joinWith('volumePrice')
            ->joinWith('moqs')
            ->joinWith('servicerStrategy servicerStrategy')
            ->joinWith('brand.servicerStrategy brandServicerStrategy')
            ->joinWith('tagStar tagStar')
            ->joinWith('goodsAttrSample goodsAttrSample')
            ->joinWith('goodsAttrRegion goodsAttrRegion');
        //  严格按筛选条件导出
//            ->where(['is_on_sale' => 1, 'is_delete' => 0])
//            ->orderBy(['o_goods.goods_id' => SORT_ASC])

        $this->load($params);

        // grid filtering conditions
        $query->andFilterWhere([
            Goods::tableName().'.goods_id' => $this->goods_id,
            Goods::tableName().'.supplier_user_id' => $this->supplier_user_id,
            Goods::tableName().'.cat_id' => $this->cat_id,
            'click_count' => $this->click_count,
            'prefix' => $this->prefix,
            Goods::tableName().'.brand_id' => $this->brand_id,
            'goods_number' => $this->goods_number,
            'number_per_box' => $this->number_per_box,
            'buy_by_box' => $this->buy_by_box,
            'goods_weight' => $this->goods_weight,
            'market_price' => $this->market_price,
            'shop_price' => $this->shop_price,
            'min_price' => $this->min_price,
            'promote_price' => $this->promote_price,
            'promote_start_date' => $this->promote_start_date,
            'promote_end_date' => $this->promote_end_date,
            'warn_number' => $this->warn_number,
            'is_real' => $this->is_real,
            'is_on_sale' => $this->is_on_sale,
            'is_alone_sale' => $this->is_alone_sale,
            'is_shipping' => $this->is_shipping,
            'integral' => $this->integral,
            'add_time' => $this->add_time,
            'sort_order' => $this->sort_order,
            'is_delete' => $this->is_delete,
            'is_best' => $this->is_best,
            'is_new' => $this->is_new,
            'is_hot' => $this->is_hot,
            'is_spec' => $this->is_spec,
            'is_promote' => $this->is_promote,
            'bonus_type_id' => $this->bonus_type_id,
            'last_update' => $this->last_update,
            'goods_type' => $this->goods_type,
            'give_integral' => $this->give_integral,
            'rank_integral' => $this->rank_integral,
            'suppliers_id' => $this->suppliers_id,
            'is_check' => $this->is_check,
            'spu_id' => $this->spu_id,
            'discount_disable' => $this->discount_disable,
            'servicer_strategy_id' => $this->servicer_strategy_id,
        ]);

        $query->andFilterWhere(['like', 'goods_sn', $this->goods_sn])
            ->andFilterWhere(['like', 'goods_name', $this->goods_name])
            ->andFilterWhere(['like', 'goods_name_style', $this->goods_name_style])
            ->andFilterWhere(['like', 'provider_name', $this->provider_name])
            ->andFilterWhere(['like', 'measure_unit', $this->measure_unit])
            ->andFilterWhere(['like', 'keywords', $this->keywords])
            ->andFilterWhere(['like', 'goods_brief', $this->goods_brief])
            ->andFilterWhere(['like', 'sku_size', $this->sku_size])
            ->andFilterWhere(['like', 'goods_desc', $this->goods_desc])
            ->andFilterWhere(['like', 'goods_thumb', $this->goods_thumb])
            ->andFilterWhere(['like', 'goods_img', $this->goods_img])
            ->andFilterWhere(['like', 'original_img', $this->original_img])
            ->andFilterWhere(['like', 'extension_code', $this->extension_code])
            ->andFilterWhere(['like', 'seller_note', $this->seller_note])
            ->andFilterWhere(['like', 'children', $this->children])
            ->andFilterWhere(['like', 'shelf_life', $this->shelf_life]);

        if ($this->starTag) {
            $query->andFilterWhere([
                'tagStar.name' => '明星单品',
            ]);
        }

        $query->distinct(Goods::tableName().'.goods_id');

        $goodsList = $query->all();

        $rank = UserRank::findOne(['rank_id' => $rankId]);

        $org_discount = 1.0;
        if($rank) {
            $org_discount = $rank->discount / 100.0;
        }

        foreach ($goodsList as $goods) {

            if ($goods['discount_disable'] == 1) {
                $discount = 1.0;
            }
            else {
                $discount = $org_discount;
            }

            if(!empty($goods->moqs)) {
                foreach ($goods->moqs as $moq) {
                    if ($moq->user_rank == $rankId && $moq->moq > 0) {
                        $goods->start_num = $moq->moq;
                    }
                }
            }

            $goods->volume_number_0 = $goods->start_num;
            $goods->volume_price_0 = NumberHelper::price_format($goods['shop_price'] * $discount);

            if (!empty($goods->volumePrice)) {
                $volume_prices = $goods->volumePrice;
                usort($volume_prices, function($a, $b) {
                    if($a['volume_number'] < $b['volume_number']) {
                        return -1;
                    } elseif ($a['volume_number'] == $b['volume_number']) {
                        return 0;
                    }
                    return 1;
                });
                foreach ($volume_prices as $index => $price) {
                    $number_attribute = 'volume_number_'. ($index + 1);
                    $goods->$number_attribute = $price['volume_number'];
                    $price_attribute = 'volume_price_'. ($index + 1);
                    $goods->$price_attribute = NumberHelper::price_format($price['volume_price'] * $discount);
                }
            }

            $goods->url = Yii::$app->params['pcHost'].'/goods.php?id='. $goods['goods_id'];
        }

        \moonland\phpexcel\Excel::export([
            'format' => 'Excel5',
            'fileName' => '商品列表('. $rank->rank_name.')',
            'models' => $goodsList,
            'columns' => [
                'goods_id',
                'goods_name',
                'click_count',
                'is_on_sale',
                'is_delete',
                'brand_id',
                'brand_name',
                'qty',
                'number_per_box',
                [
                    'attribute' => 'buy_by_box',
                    'value' => function($model) {
                        return $model->buy_by_box == 1 ? '按箱购买': '不按箱';
                    },
                ],
                'cat_name',
                'goods_sn',
                [
                    'attribute' => 'goods_sn_with_prefix',
                    'value' => function($model) {
                        if ($model->prefix != 'NO') {
                            return $model->prefix.$model->goods_sn;
                        }
                        return $model->goods_sn;
                    },
                ],

                'certificate',
                'start_num',
                'volume_number_0',
                'volume_price_0',
                'volume_number_1',
                'volume_price_1',
                'volume_number_2',
                'volume_price_2',
                'market_price',
                'goods_number',
                'measure_unit',
                [
                    'attribute' => 'discount_disable',
                    'value' => function($model) {
                        return $model->discount_disable == 1 ? '1(不参与)': '0(参与)';
                    },
                ],
                'dividePercent',
                'parentDividePercent',
                [
                    'attribute' => 'sample',
                    'value' => function($model) {
                        if (empty($model->goodsAttrSample)) {
                            return '';
                        }
                        return $model->goodsAttrSample['attr_value'];
                    }
                ],
                [
                    'attribute' => 'region',
                    'value' => function($model) {
                        if (empty($model->goodsAttrRegion)) {
                            return '';
                        }
                        return $model->goodsAttrRegion['attr_value'];
                    }
                ],
                'url',
            ], //without header working, because the header will be get label from attribute label.
            'headers' => [
                'goods_id' => '商品ID',
                'goods_name' => '商品名',
                'click_count' => '浏览量',
                'is_on_sale' => '是否在售',
                'is_delete' => '是否被删除',
                'brand_id' => '品牌ID',
                'brand_name' => '品牌名称',
                'qty' => '箱规',
                'number_per_box' => '发货箱规',
                'buy_by_box' => '是否按箱购买',
                'cat_name' => '分类',
                'goods_sn' => '条形码',
                'goods_sn_with_prefix' => '有前缀的条形码',
                'certificate' => '证件号',
                'start_num' => '起售数量',
                'volume_number_0' => '订购量1',
                'volume_price_0' => '价格1',
                'volume_number_1' => '订购量2',
                'volume_price_1' => '价格2',
                'volume_number_2' => '订购量3',
                'volume_price_2' => '价格3',
                'market_price' => '市场价',
                'goods_number' => '库存',
                'measure_unit' => '计量单位',
                'discount_disable' => '是否参与会员折扣',
                'dividePercent' => '服务商分成比例',
                'parentDividePercent' => '品牌的服务商分成比例',
                'sample' => '物料配比',
                'region' => '产地',
                'url' => '商城链接',
            ],
        ]);
    }

    public function exportSupplyInfo($params) {

        $query = Goods::find()->select([
            'o_goods.goods_id',
            'o_goods.goods_sn',
            'o_goods.prefix',
            'o_goods.goods_name',
            'o_goods.is_on_sale',
            'o_goods.is_delete',
            'o_goods.market_price',
            'o_goods.shop_price',
            'o_goods.goods_number',
            'o_brand.brand_name AS brand_name',
            'supplyInfo.supply_price AS supplyPrice',
        ]);

        $query->joinWith('category')
            ->joinWith('brand')
            ->joinWith('supplyInfo supplyInfo');
        //  严格按筛选条件导出
//            ->where(['is_on_sale' => 1, 'is_delete' => 0])
//            ->orderBy(['o_goods.goods_id' => SORT_ASC])

        $this->load($params);

        // grid filtering conditions
        $query->andFilterWhere([
            Goods::tableName().'.goods_id' => $this->goods_id,
            Goods::tableName().'.supplier_user_id' => $this->supplier_user_id,
            Goods::tableName().'.cat_id' => $this->cat_id,
            'click_count' => $this->click_count,
            'prefix' => $this->prefix,
            Goods::tableName().'.brand_id' => $this->brand_id,
            'goods_number' => $this->goods_number,
            'number_per_box' => $this->number_per_box,
            'buy_by_box' => $this->buy_by_box,
            'goods_weight' => $this->goods_weight,
            'market_price' => $this->market_price,
            'shop_price' => $this->shop_price,
            'min_price' => $this->min_price,
            'promote_price' => $this->promote_price,
            'promote_start_date' => $this->promote_start_date,
            'promote_end_date' => $this->promote_end_date,
            'warn_number' => $this->warn_number,
            'is_real' => $this->is_real,
            'is_on_sale' => $this->is_on_sale,
            'is_alone_sale' => $this->is_alone_sale,
            'is_shipping' => $this->is_shipping,
            'integral' => $this->integral,
            'add_time' => $this->add_time,
            'sort_order' => $this->sort_order,
            'is_delete' => $this->is_delete,
            'is_best' => $this->is_best,
            'is_new' => $this->is_new,
            'is_hot' => $this->is_hot,
            'is_spec' => $this->is_spec,
            'is_promote' => $this->is_promote,
            'bonus_type_id' => $this->bonus_type_id,
            'last_update' => $this->last_update,
            'goods_type' => $this->goods_type,
            'give_integral' => $this->give_integral,
            'rank_integral' => $this->rank_integral,
            'suppliers_id' => $this->suppliers_id,
            'is_check' => $this->is_check,
            'spu_id' => $this->spu_id,
            'discount_disable' => $this->discount_disable,
            'servicer_strategy_id' => $this->servicer_strategy_id,
        ]);

        $query->andFilterWhere(['like', 'goods_sn', $this->goods_sn])
            ->andFilterWhere(['like', 'goods_name', $this->goods_name])
            ->andFilterWhere(['like', 'goods_name_style', $this->goods_name_style])
            ->andFilterWhere(['like', 'provider_name', $this->provider_name])
            ->andFilterWhere(['like', 'measure_unit', $this->measure_unit])
            ->andFilterWhere(['like', 'keywords', $this->keywords])
            ->andFilterWhere(['like', 'goods_brief', $this->goods_brief])
            ->andFilterWhere(['like', 'sku_size', $this->sku_size])
            ->andFilterWhere(['like', 'goods_desc', $this->goods_desc])
            ->andFilterWhere(['like', 'goods_thumb', $this->goods_thumb])
            ->andFilterWhere(['like', 'goods_img', $this->goods_img])
            ->andFilterWhere(['like', 'original_img', $this->original_img])
            ->andFilterWhere(['like', 'extension_code', $this->extension_code])
            ->andFilterWhere(['like', 'seller_note', $this->seller_note])
            ->andFilterWhere(['like', 'children', $this->children])
            ->andFilterWhere(['like', 'shelf_life', $this->shelf_life]);

        $query->distinct(Goods::tableName().'.goods_id');

        $goodsList = $query->all();

        \moonland\phpexcel\Excel::export([
            'format' => 'Excel5',
            'fileName' => '商品分成成本列表',
            'models' => $goodsList,
            'columns' => [
                'goods_id',
                'goods_name',
                'goods_sn',
                'brand_name',
                'shop_price',
                'supplyPrice',
                'market_price',
                'is_on_sale',
                'is_delete',
                'goods_number',
            ], //without header working, because the header will be get label from attribute label.
            'headers' => [
                'goods_id' => '商品ID',
                'goods_name' => '商品名',
                'brand_id' => '品牌ID',
                'brand_name' => '品牌名称',
                'goods_sn' => '条形码',
                'start_num' => '起售数量',
                'shop_price' => '本店售价',
                'supplyPrice' => '服务商分成成本价',
                'market_price' => '市场价',
                'is_on_sale' => '是否上线',
                'is_delete' => '是否被删除',
                'goods_number' => '库存',
            ],
        ]);
    }
}
