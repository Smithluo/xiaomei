<?php
/**
 * Created by PhpStorm.
 * User: root
 * Date: 16-9-29
 * Time: 下午6:56
 */
namespace order\models;

use common\helper\DateTimeHelper;
use common\helper\OrderGroupHelper;
use common\models\Goods;
use common\models\OrderGoods;
use common\models\OrderInfo;
use Yii;
use yii\base\Model;
use yii\helpers\VarDumper;
use yii\web\BadRequestHttpException;
use yii\web\ServerErrorHttpException;
use yii\base\Exception;

class OrderGroupImportForm extends Model
{
    public $file;

    public function attributeLabels()
    {
        return [
            'file' => '商品数据导入（excel文件）'
        ]; // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return [
            [['file'], 'file', 'skipOnEmpty' => false],
        ];
    }

    /**
     * 第三方用户导入线下订单
     *
     * 不考虑 满赠、满减、优惠券、物料配比
     * 不考虑按箱购买，全部支持散批
     * 按 供应商/品牌 拆单
     * 实际支付的时候可能缺货，后台手动支付也要有对应提醒
     * 如果模板有错误，整个模板不导入
     * @return bool
     * @throws BadRequestHttpException
     * @throws ServerErrorHttpException
     * @throws \Exception
     * @throws \Throwable
     */
    public function import() {
        if($this->validate()) {
            if ($this->file->extension != 'xlsx' && $this->file->extension != 'xls') {
                return false;
            }
            $time = date('Ymd-His');
            $filePath = 'uploads/' . $time . $this->file->baseName . '.' . $this->file->extension;
            $this->file->saveAs('uploads/' . $time . $this->file->baseName . '.' . $this->file->extension);
            $data = \moonland\phpexcel\Excel::import($filePath);

            if(!empty($data)) {
                $wrongMessageList = [];
                $mobilePhone = Yii::$app->user->identity->mobile_phone;   //  下单人的联系方式

                $groupDataList = [];
                $priceDiff = 12;    //  价格调整
                $useStorage = 0;    //  默认不减库存，下单减库存
                $row = 1;
                if (!empty($mobilePhone)) {
                    foreach ($data as $importItem) {
                        //  如果出现整行的空数据，跳过,如果导入的购买数量不是数字（考虑用户导入的时候没去掉模板说明）跳过
                        if (
                            empty($importItem['consignee']) &&
                            empty($importItem['address']) &&
                            empty($importItem['mobile']) &&
                            empty($importItem['goods_sn']) &&
                            empty($importItem['goods_number'])
                        ) {
                            continue;
                        }

                        $row++;
                        $current_wrong_message = '';
                        $wrongMessageHeader = '第'.$row.'行：';

                        if (empty($importItem['goods_sn'])) {
                            $current_wrong_message .= '缺少商品条码，';
                        } else {
                            $goodsSn = $importItem['goods_sn'];
                            $wrongMessageHeader .= '商品条码为'.$goodsSn.'，';
                        }

                        if (empty($importItem['goods_number']) || $importItem['goods_number'] < 1) {
                            $current_wrong_message .= '商品数量无效，';
                        } else {
                            $goodsNumber = intval($importItem['goods_number']);
                        }

                        $goodsModel = Goods::find()->where([
                                'goods_sn' => $goodsSn,
                                'is_on_sale' => Goods::IS_ON_SALE,
                                'is_delete' => Goods::IS_NOT_DELETE,
                                'prefix' => 'ZF',
                            ])->one();

                        if (empty($goodsModel)) {
                            $current_wrong_message .= '商品不存在或已下架，';
                        } elseif ($goodsModel->goods_number < $goodsNumber) {
                            $current_wrong_message .= '商品库存不足，';
                        }

                        if (!empty($goodsModel->shop_price)) {
                            $goodsPrice = $goodsModel->shop_price + $priceDiff;
                        } else {
                            $current_wrong_message .= '商品信息错误，暂不销售，';
                        }

                        //  只处理没有错误的数据
                        if (empty($current_wrong_message)) {
                            if (!empty($importItem['consignee'])) {
                                $groupDataList[] = $importItem;
                            }

                            $goods = [
                                'goodsModel' => $goodsModel,
                                'goodsNumber' => $goodsNumber,
                                'goodsPrice' => $goodsPrice,
                                'useStorage' => $useStorage,
                            ];

                            if (!empty($groupDataList)) {
                                $index = count($groupDataList) - 1;
                                if ($goodsModel['supplier_user_id'] != 0) {
                                    if (empty($groupDataList[$index]['goodsListBySupplier'][$goodsModel->supplier_user_id])) {
                                        $groupDataList[$index]['goodsListBySupplier'][$goodsModel->supplier_user_id] = [];
                                    }
                                    $groupDataList[$index]['goodsListBySupplier'][$goodsModel->supplier_user_id][] = $goods;
                                }
                                else {
                                    if (empty($groupDataList[$index]['goodsListByBrand'][$goodsModel->brand_id])) {
                                        $groupDataList[$index]['goodsListByBrand'][$goodsModel->brand_id] = [];
                                    }
                                    $groupDataList[$index]['goodsListByBrand'][$goodsModel->brand_id][] = $goods;
                                }
                            }

                        }
                        else {
                            $wrongMessageList[] = $wrongMessageHeader.$current_wrong_message;
                        }
                    }

                    //  如果模板有错误，整个模板不导入
                    if (!empty($wrongMessageList)) {
                        $failMsg = '导入的excel有部分数据不正确，请修改后重试'.PHP_EOL.implode(PHP_EOL, $wrongMessageList);
                        Yii::warning($failMsg, __METHOD__);
                        throw new ServerErrorHttpException($failMsg);
                        unlink($filePath);
                        return false;
                    } elseif (empty($groupDataList)) {
                        $failMsg = '没有有效的订单数据，请检查右边的 导入模板说明';
                        Yii::warning($failMsg, __METHOD__);
                        throw new ServerErrorHttpException($failMsg);
                        unlink($filePath);
                        return false;
                    }

                    $transaction = OrderGroup::getDb()->beginTransaction();
                    try {
                        foreach ($groupDataList as $dataItem) {
                            $freeShip = 1;  //  包邮
                            $date = date('Ymd');

                            $orderGroup = new OrderGroup();
                            $orderGroup->user_id = Yii::$app->user->identity->user_id;
                            $orderGroup->offline = 1;   //  线下订单
                            $orderGroup->create_time = DateTimeHelper::gmtime();
                            $orderGroup->group_id = OrderGroupHelper::getUniqidGroupId($orderGroup->user_id, $date);
                            $orderGroup->group_status = OrderGroup::ORDER_GROUP_STATUS_UNPAY;
                            $orderGroup->consignee = $dataItem['consignee'];
                            $orderGroup->country = 1;
                            if (!empty($dataItem['province'])) {
                                $orderGroup->province = $dataItem['province'];
                            }
                            if (!empty($dataItem['city'])) {
                                $orderGroup->city = $dataItem['city'];
                            }
                            if (!empty($dataItem['district'])) {
                                $orderGroup->district = $dataItem['district'];
                            }
                            $orderGroup->address = $dataItem['address'];
                            $orderGroup->mobile = ''.$dataItem['mobile'];
                            $orderGroup->pay_id = 0;
                            $orderGroup->pay_name = '未知';


                            if (!$orderGroup->save()) {
                                throw new Exception('总单保存失败', 1);
                            }

                            //  供应商分单
                            if (!empty($dataItem['goodsListBySupplier'])) {
                                $goodsListBySupplier = $dataItem['goodsListBySupplier'];

                                foreach ($goodsListBySupplier as $supplierUserId => $goodsList) {
                                    $orderInfo = OrderInfo::createFromOrderGroup($orderGroup, $date);
                                    $orderInfo->supplier_user_id = $supplierUserId;
                                    if ($freeShip == 1) {
                                        $orderInfo->shipping_id = 6;
                                        $orderInfo->shipping_name = '全国包邮';
                                    }
                                    else {
                                        $orderInfo->shipping_id = 3;
                                        $orderInfo->shipping_name = '运费到付';
                                    }
                                    $orderGroup->link('orderList', $orderInfo);
                                    if ($orderInfo->hasErrors()) {
                                        throw new Exception('子单link失败', 2);
                                    }
                                    foreach ($goodsList as $item) {
                                        $goodsModel = $item['goodsModel'];
                                        $orderGoods = OrderGoods::createFromGoods($goodsModel);
                                        $orderGoods->goods_number = $item['goodsNumber'];

                                        if (!empty($item['useStorage'])) {
                                            $goodsModel->goods_number -= $orderGoods->goods_number;
                                            if (!$goodsModel->save()) {
                                                throw new ServerErrorHttpException('商品扣库存失败，商品名：'.
                                                    $goodsModel->goods_name. ', 条码：'. $goodsModel->goods_sn);
                                            }
                                        }

                                        $orderGoods->goods_price = $item['goodsPrice'];
                                        $orderGoods->pay_price = $item['goodsPrice'];
                                        $orderInfo->link('ordergoods', $orderGoods);
                                        if ($orderGoods->hasErrors()) {
                                            throw new Exception('订单商品保存失败', 3);
                                        }
                                    }

                                    $orderInfo->recalcGoodsAmount();
                                    if (!$orderInfo->save()) {
                                        throw new Exception('子单保存失败', 4);
                                    } else {
                                        //  支付记录入库
                                        $payLog = new PayLog();
                                        $payLog->order_id = $orderInfo->order_id;
                                        $payLog->order_amount = $orderInfo->order_amount;
                                        $payLog->order_type = 0;
                                        $payLog->is_paid = 0;

                                        Yii::warning(' 支付记录入库 $payLog = '.VarDumper::dumpAsString($payLog), __METHOD__);
                                        if (!$payLog->save()) {
                                            Yii::warning(__LINE__ .
                                                ' pay_log 支付记录入库失败 $payLog = ' . VarDumper::dumpAsString($payLog) .
                                                '; $payLog->errors = ' . json_encode($orderInfo->errors));
                                            throw new ServerErrorHttpException('支付记录入库失败', 5);
                                        }
                                    }
                                }

                                $orderGroup->syncFeeInfo();
                                $orderGroup->syncTimeInfo();

                                if (!$orderGroup->save()) {
                                    throw new Exception('总单保存失败', 5);
                                }
                            }

                            //  品牌分单
                            if (!empty($dataItem['goodsListByBrand'])) {
                                $goodsListByBrand = $dataItem['goodsListByBrand'] ?: [];
                                foreach ($goodsListByBrand as $brandId => $goodsList) {
                                    $orderInfo = OrderInfo::createFromOrderGroup($orderGroup, $date);
                                    $orderInfo->brand_id = $brandId;
                                    $orderGroup->link('orderList', $orderInfo);
                                    if ($orderInfo->hasErrors()) {
                                        throw new Exception('子单link失败', 6);
                                    }

                                    foreach ($goodsList as $item) {
                                        $goodsModel = $item['goodsModel'];
                                        $orderGoods = OrderGoods::createFromGoods($goodsModel);
                                        $orderGoods->goods_number = $item['goodsNumber'];

                                        if (!empty($item['useStorage'])) {
                                            $goodsModel['goods_number'] -= $orderGoods->goods_number;
                                            if (!$goodsModel->save()) {
                                                throw new ServerErrorHttpException('商品扣库存失败，商品名：'.
                                                    $goodsModel->goods_name. ', 条码：'. $goodsModel->goods_sn);
                                            }
                                        }

                                        $orderGoods->goods_price = $item['goodsPrice'];
                                        $orderGoods->pay_price = $item['goodsPrice'];
                                        $orderInfo->link('ordergoods', $orderGoods);
                                        if ($orderGoods->hasErrors()) {
                                            throw new Exception('订单商品保存失败', 7);
                                        }
                                    }

                                    $orderInfo->recalcGoodsAmount();
                                    if (!$orderInfo->save()) {
                                        throw new Exception('订单保存失败', 8);
                                    }
                                }

                                $orderGroup->syncFeeInfo();
                                $orderGroup->syncTimeInfo();

                                if (!$orderGroup->save()) {
                                    throw new Exception('总单保存失败', 9);
                                }
                            }
                        }
                        $transaction->commit();
                    }
                    catch (\Exception $e) {
                        Yii::error('创建订单失败 e = '. VarDumper::export($e), __METHOD__);
                        $transaction->rollBack();
                        unlink($filePath);
                        throw $e;
                    }
                    catch (\Throwable $e) {
                        Yii::error('创建订单失败 e = '. VarDumper::export($e), __METHOD__);
                        $transaction->rollBack();
                        unlink($filePath);
                        throw $e;
                    }

                }

            }
            else {
                unlink($filePath);
                return false;
            }
            unlink($filePath);
            Yii::$app->session->setFlash('success', '订单导入成功');
            return true;
        }
        return false;
    }

}