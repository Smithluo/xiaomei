<?php

namespace backend\controllers;

use backend\models\Users;
use backend\models\CouponRecord;
use backend\models\CouponRecordSearch;
use common\helper\CouponHelper;
use kartik\grid\EditableColumnAction;
use Yii;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * CouponRecordController implements the CRUD actions for CouponRecord model.
 */
class CouponRecordController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function actions()
    {
        return ArrayHelper::merge(parent::actions(), [
            'editStatus' => [
                'class' => EditableColumnAction::className(),
                'modelClass' => CouponRecord::className(),
                'outputValue' => function($model, $attribute, $key, $index) {
                    return ''.CouponRecord::$couponStatusMap[$model->$attribute];
                },
                'outputMessage' => function($model, $attribute, $key, $index) {
                    return '';
                },
                'showModelErrors' => true,
                'errorOptions' => ['header' => '']
            ],
            'bind' => [
                'class' => EditableColumnAction::className(),
                'modelClass' => CouponRecord::className(),
                'outputValue' => function($model, $attribute, $key, $index) {
                    return ''.$model->user->showName;
                },
                'outputMessage' => function($model, $attribute, $key, $index) {
                    return '';
                },
                'showModelErrors' => true,
                'errorOptions' => ['header' => '']
            ],

        ]); // TODO: Change the autogenerated stub

    }

    /**
     * Lists all CouponRecord models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new CouponRecordSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        $usersMap = Users::getAllUsers();
        $couponStatusMap = CouponRecord::$couponStatusMap;

        $couponEventMap = CouponHelper::getCouponEventMap();
        $couponEventRuleMap = CouponHelper::getCouponEventRuleMap();

        return $this->render('index', [
            'searchModel'           => $searchModel,
            'dataProvider'          => $dataProvider,
            'usersMap'              => $usersMap,
            'couponStatusMap'       => $couponStatusMap,
            'couponEventMap'        => $couponEventMap,
            'couponEventRuleMap'    => $couponEventRuleMap,
        ]);
    }

    /**
     * Displays a single CouponRecord model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        $couponStatusMap = CouponRecord::$couponStatusMap;

        return $this->render('view', [
            'model' => $this->findModel($id),
            'couponStatusMap'       => $couponStatusMap,
        ]);
    }

    /**
     * Creates a new CouponRecord model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new CouponRecord();
        $couponStatusMap = CouponRecord::$couponStatusMap;
        $usersMap = Users::getAllUsers();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->coupon_id]);
        } else {
            return $this->render('create', [
                'model' => $model,
                'usersMap' => $usersMap,
                'couponStatusMap' => $couponStatusMap,
            ]);
        }
    }

    /**
     * Updates an existing CouponRecord model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        $usersMap = Users::getAllUsers();
        $couponStatusMap = CouponRecord::$couponStatusMap;

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->coupon_id]);
        } else {
            return $this->render('update', [
                'model' => $model,
                'usersMap' => $usersMap,
                'couponStatusMap' => $couponStatusMap,
            ]);
        }
    }

    /**
     * Deletes an existing CouponRecord model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the CouponRecord model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return CouponRecord the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = CouponRecord::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    public function actionExport() {
        $searchModel = new CouponRecordSearch();
        $searchModel->export(Yii::$app->request->queryParams);
        $this->redirect(['index']);
    }
}
