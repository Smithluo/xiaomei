<?php

namespace common\models;

use common\helper\DateTimeHelper;
use common\behaviors\VideoImageBehavior;
use common\helper\FileHelper;
use Yii;

/**
 * This is the model class for table "o_article".
 *
 * @property integer $article_id
 * @property integer $cat_id
 * @property string $title
 * @property string $pic
 * @property integer $brand_id
 * @property string $content
 * @property string $author
 * @property string $author_email
 * @property string $keywords
 * @property integer $article_type
 * @property integer $is_open
 * @property integer $add_time
 * @property string $file_url
 * @property integer $open_type
 * @property string $link
 * @property string $description
 * @property integer $sort_order
 * @property string $tag
 * @property string $resource_type
 * @property string $country
 * @property string $scene
 * @property int $complex_order
 * @property int $link_cat
 * @property int $resource_site_id
 * @property int $gallery_id
 * @property int $click
 */
class Article extends \yii\db\ActiveRecord
{
    const IS_OPEN = 1;      //  显示
    const IS_NOT_OPEN = 0;  //  不显示

    const RESOURCE_TYPE_ARTICLE     = 'article';
    const RESOURCE_TYPE_GALLERY     = 'gallery';
    const RESOURCE_TYPE_VIDEO       = 'video';
    const RESOURCE_TYPE_DOWNLOAD    = 'download';

    public static $resourceTypeMap = [
        self::RESOURCE_TYPE_ARTICLE     => '文章',
        self::RESOURCE_TYPE_GALLERY     => '相册',
        self::RESOURCE_TYPE_VIDEO       => '视频',
        self::RESOURCE_TYPE_DOWNLOAD    => '下载',
    ];

    public static $sceneMap = [
        '产品介绍' => '产品介绍',
        '品牌介绍' => '品牌介绍',
        '产品推荐' => '产品推荐',
    ];
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'o_article';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [
                [
                    'cat_id', 'article_type', 'is_open', 'add_time', 'open_type', 'sort_order', 'brand_id',
                    'complex_order', 'click', 'gallery_id', 'resource_site_id', 'link_cat', 'country'
                ],
                'integer'
            ],
            [['content'], 'string'],
            [['title'], 'string', 'max' => 150],
            [['author'], 'string', 'max' => 30],
            [['resource_type', 'scene'], 'string', 'max' => 10],
            [['author_email'], 'string', 'max' => 60],
            [['description'], 'string', 'max' => 65535],
            [['keywords', 'file_url', 'link'], 'string', 'max' => 255],
            [['tag'], 'string', 'max' => 6],

            ['pic', 'image', 'extensions' => 'jpg, jpeg, gif, png', 'on' => ['insert', 'update']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'article_id' => '文章ID',
            'cat_id' => '文章分类',
            'title' => '标题',
            'content' => '内容',
            'author' => '作者',
            'author_email' => '作者Email',
            'keywords' => '关键词',
            'article_type' => '文章类型(废弃)',
            'is_open' => '是否显示',
            'add_time' => '创建时间',
            'file_url' => '附件链接',
            'open_type' => '打开类型(1为打开外链，其它为打开编辑内容)',
            'link' => '外链',
            'description' => '描述',
            'sort_order' => '排序权重',
            'tag' => '标签(显示在首页公告区文章的中括号内)',
            'pic' => '图片(285*210px)',
            'resource_type' => '资源类型',
            'click' => '点击量',
            'gallery_id' => '关联相册',
            'resource_site_id' => '来源站点',
            'country' => '区域维度',
            'link_cat' => '品类维度',
            'scene' => '应用场景',
            'complex_order' => '综合排序',
            'brand_id' => '关联品牌',
        ];
    }

    /**
     * @inheritdoc
     * @return ArticleQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new ArticleQuery(get_called_class());
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->content = htmlspecialchars_decode(stripslashes($this->content));
        $this->description = htmlspecialchars_decode(stripslashes($this->description));
    }

    public function beforeSave($insert)
    {
        if (parent::beforeSave($insert)) {
            if ($this->sort_order == null) {
                $this->sort_order = 0;
            }
            if (!empty($this->content)) {
                $this->content = addslashes(htmlspecialchars($this->content));
                $this->description = addslashes(htmlspecialchars($this->description));
            }

            if ($insert) {
                $this->click = rand(50, 200);
            }

            return true;
        } else {
            return false;
        }
    }

    public function afterValidate()
    {
        parent::afterValidate(); // TODO: Change the autogenerated stub
        if ($this->open_type == 1 && empty($this->link)) {
            $this->addError('link', '内容为空的时候外链不能为空');
        }
        else if ($this->open_type != 1 && empty($this->content)) {
            $this->addError('content', '无外链的时候内容不能为空');
        }
        if (!empty($this->link) && !strstr($this->link, 'http://')) {
            $this->addError('link', '必须以http://开头');
        }
    }

    /**
     * 获取文章关联的品类
     * @return \yii\db\ActiveQuery
     */
    public function getCategory() {
        return $this->hasOne(Category::className(), ['cat_id' => 'link_cat']);
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => \mongosoft\file\UploadImageBehavior::className(),
                'attribute' => 'pic',
                'scenarios' => ['insert', 'update'],
                'path' => '@imgRoot/article_pic/{article_id}',
                'url' => Yii::$app->params['shop_config']['img_base_url'].'/article_pic/{article_id}',
                'thumbs' => [],
                'unlinkOnDelete' => true,
            ],
            [
                'class' => VideoImageBehavior::className(),         //抽取10s时候的帧
            ],
        ];
    }

    /**
     * 关联来源站点
     * @return \yii\db\ActiveQuery
     */
    public function getResourceSite()
    {
        return $this->hasOne(ResourceSite::className(), ['id' => 'resource_site_id']);
    }

    /**
     * 关联相册
     * @return \yii\db\ActiveQuery
     */
    public function getGallery()
    {
        return $this->hasOne(Gallery::className(), ['gallery_id' => 'gallery_id']);
    }

    /**
     * 关联相册对应的图片
     * @return $this
     */
    public function getGallerImg()
    {
        return $this->hasMany(GalleryImg::className(), ['gallery_id' => 'gallery_id'])
            ->via('gallery');
    }

    public function getFileUrlList() {
        $preg='/<a .*?href="(.*?)".*?title="(.*?)".*?>/is';
        $content = htmlspecialchars_decode(stripslashes($this->content));
        $result = preg_match_all($preg, $content, $match);
        if ($result >= 1) {
            $urls = $match[1];
            $fileNames = $match[2];
            $fileList = [];
            foreach ($urls as $k => $url) {
                $localPath = str_replace(Yii::$app->params['shop_config']['img_base_url'], '', $url);
                $localPath = Yii::getAlias('@imgRoot'). '/'. $localPath;
                //转换为多少MB
                $sizeInBytes = filesize($localPath);

                if ($sizeInBytes < 1024) {
                    $fileSize = $sizeInBytes. '字节';
                } else if ($sizeInBytes < 1024 * 1024) {
                    $fileSize = ''. intval($sizeInBytes / 1024). 'K';
                } else if ($sizeInBytes < 1024 * 1024 * 1024) {
                    $fileSize = ''. intval($sizeInBytes / (1024 * 1024)). 'M';
                } else {
                    $fileSize = ''. intval($sizeInBytes / (1024 * 1024 * 1024)). 'G';
                }
                $fileModifyTime = DateTimeHelper::getFormatDate(filemtime($localPath));
                if ($k < count($fileNames)) {
                    $fileName = $fileNames[$k];
                    $fileList[] = [
                        'title' => $fileName,
                        'url' => $url,
                        'size' => $fileSize,
                        'time' => $fileModifyTime,
                    ];
                }
            }
            return $fileList;
        }
        return [];
    }

    public function getVideoUrl() {
        $preg='/<video .*?src="(.*?)".*?>/is';
        $content = htmlspecialchars_decode(stripslashes($this->content));
        $result = preg_match($preg, $content, $match);
        if ($result > 0) {
            return $match[1];
        }
        return false;
    }

    public function getVideoType() {
        $preg='/<source .*?type="(.*?)".*?>/is';
        $content = htmlspecialchars_decode(stripslashes($this->content));
        $result = preg_match($preg, $content, $match);
        if ($result > 0) {
            return $match[1];
        }
        return false;
    }

    public function getVideoPath() {
        $url = $this->getVideoUrl();
        if (!empty($url)) {
            $localPath = str_replace(Yii::$app->params['shop_config']['img_base_url'], '', $url);
            $absPath = Yii::getAlias('@imgRoot'). '/'. $localPath;
            return $absPath;
        }
        return false;
    }

    /**
     * 文章关联相册图片
     * @return \yii\db\ActiveQuery
     */
    public function getGalleryImg()
    {
        return $this->hasMany(GalleryImg::className(), ['gallery_id' => 'gallery_id']);
    }

    /**
     * 美妆知识库 通用的 获取数据的方法
     * @param int $pageSize
     * @param $params
     * @return array|Article[]
     */
    public static function getArticleByType($pageSize = 0, $params)
    {
        $taTb = self::tableName();

        if (!empty($pageSize)) {
            $offset = ($params['page'] - 1) * $pageSize;
        }

        if (in_array($params['act'], ['all', 'search_result'])) {
            $query = self::find()
                ->joinWith([
                    'resourceSite',
//                    'galleryImg' => function ($query) {
//                        return $query->orderBy(['sort_order' => SORT_DESC])->limit(3);
//                    },
                ])
                ->where([
                    $taTb.'.cat_id' => $params['catId'],
                    $taTb.'.is_open' => self::IS_OPEN,
                ]);

            if (!empty($params['brandId'])) {
                $query->andWhere([$taTb.'.brand_id' => $params['brandId']]);
            }
        }
        elseif (in_array($params['act'], ['article', 'gallery', 'video', 'download'])) {
            $query = self::find()->joinWith('resourceSite');

            if ($params['act'] == 'gallery') {
                $query->joinWith([
                    'galleryImg' => function ($query) {
                        return $query->orderBy(['sort_order' => SORT_DESC])->limit(4);
                    },
                ]);
            }

            $query->where([
                $taTb.'.cat_id' => $params['catId'],
                $taTb.'.is_open' => self::IS_OPEN,
                $taTb.'.resource_type' => $params['act']
            ]);


            if (!empty($params['brandId'])) {
                $query->andWhere([$taTb.'.brand_id' => $params['brandId']]);
            }
        }

        //  筛选条件
        if (!empty($params['country'])) {
            $query->andWhere(['country' => $params['country']]);
        }
        if (!empty($params['link_cat'])) {
            $query->andWhere(['link_cat' => $params['link_cat']]);
        }
        if (!empty($params['scene'])) {
            $query->andWhere(['scene' => $params['scene']]);
        }

        if (!empty($params['act']) && in_array($params['act'], ['article', 'gallery', 'video', 'download'])) {
            $query->groupBy('article_id');
        }

        if (!empty($params['sort'])) {
            $query->orderBy($params['sort']);
        } else {
            $query->orderBy(['complex_order' => SORT_DESC]);
        }

        if (!empty($pageSize)) {
            $query->offset($offset)->limit($pageSize);
        }

        return $query->all();
    }

    /**
     * 格式化 美妆知识库的数据
     * @param $articles
     * @return array
     */
    public static function articleFormat($articles)
    {
        $articleList =[];
        if ($articles) {
            foreach ($articles as $article) {
                $infoAct =(string)$article->resource_type.'_info';
                if ($article->open_type == 1) {
                    $url = $article->link;
                }
                else {
                    if ($article->resource_type == self::RESOURCE_TYPE_VIDEO) {
                        $url = '/beauty_academy.php?act='.$infoAct.'&id='.$article->article_id;
                    }
                    else {
                        $url = '/beauty_academy.php?act='.$infoAct.'&id='.$article->article_id;
                    }
                }

                $item = [
                    'article_id' => (int)$article->article_id,
                    'resource_type' => (string)$article->resource_type,
                    'title' => (string)$article->title,
                    'click' => (int)$article->click,
                    'date' => DateTimeHelper::getFormatCNDate($article->add_time),
                    'url' => $url,
                    'shareUrl' => $article->open_type == 1
                        ? $article->link
                        : '/beauty_academy.php?act='.$infoAct.'&id='. $article->article_id,
                    'site_name' => !empty($article->resourceSite->site_name) ? $article->resourceSite->site_name : '',
                    'site_logo' => !empty($article->resourceSite->site_logo)
                        ? $article->resourceSite->getUploadUrl('site_logo')
                        : '',
                    'pic' => !empty($article->pic) ? $article->getUploadUrl('pic') : '',    //  默认封面图
                ];

                //  图库 的图片为空的过滤掉
                if ($article->resource_type == 'gallery' && !empty($article->gallery_id)) {

                    $galleryImg = GalleryImg::find()
                        ->where(['gallery_id' => $article->gallery_id])
                        ->orderBy(['sort_order' => SORT_DESC])
                        ->limit(4)
                        ->all();
                    if (empty($galleryImg)) {
                        continue;
                    } else {
                        $item['gallery_id'] = (int)$article->gallery_id;
                        $item['url'] = $article->open_type == 1
                            ? $article->link
                            : '/beauty_academy.php?act='.$infoAct.'&id='.$article->article_id;

                        //  相册要处理前三张图片, 不足三张的留空白
                        foreach ($galleryImg as $index => $img) {
                            if ($index == 0) {
                                $item['pic'] = $img->getUploadUrl('img_url');
                            }
                            $item['galleryImg'][]= $img->getUploadUrl('img_url');
                        }

                        if (count($item['galleryImg'] < 4)) {
                            $item['galleryImg'] = array_pad($item['galleryImg'], 4, '');
                        }
                    }

                }
                elseif ($article->resource_type == 'video') {
                    //  从 富文本信息 中 正则匹配出第一个视频的地址
                    $videoPath = $article->getVideoUrl();
                    if (!empty($videoPath)) {
                        $item['video_path'] = $videoPath;
                    } else {
                        continue;
                    }
                }

                $articleList[] = $item;
            }
        }

        return $articleList;
    }

    /**
     * 增加文章点击量
     */
    public function increaseClick()
    {
        $this->click += 1;

        if (!$this->save()) {
            Yii::error(' $articleId = '.$this->article_id.'的文章增加阅读量失败', __METHOD__);
        }
    }


    /**
     * 关联文章的分类
     * @return \yii\db\ActiveQuery
     */
    public function getArticleCat()
    {
        return $this->hasOne(ArticleCat::className(), ['cat_id' => 'cat_id']);
    }

    /**
     * 关联文章的区域
     * @return \yii\db\ActiveQuery
     */
    public function getRegion()
    {
        return $this->hasOne(Region::className(), ['region_id' => 'country']);
    }

    /**
     * 获取国家 的 region_id => region_name 映射关系
     * @param string $resourceType  文章资源类型
     * @return array
     */
    public static function getCountryMap($resourceType = '')
    {
        $countryMap = [];
        $query = self::find()
            ->joinWith(['region'])
            ->where([
                'is_open' => Article::IS_OPEN,
                Region::tableName().'.parent_id' => 0,
            ])
            ->andWhere(['>', 'country', 0]);

        if (!empty($resourceType)) {
            $query->andWhere(['resource_type' => $resourceType]);
        }

        $articleList = $query->distinct('country')->all();

        if (!empty($articleList)) {
            foreach ($articleList as $article) {
                if (!empty($article->region->region_name)) {
                    $countryMap[$article->region->region_id] = $article->region->region_name;
                }
            }
        }

        return $countryMap;
    }

    /**
     * 获取文章关联品类的 的 link_cat => cat_name 映射关系
     * @param string $resourceType  文章资源类型
     * @return array
     */
    public static function getCategoryMap($resourceType = '')
    {
        $categoryItem = [];
        $query = Article::find()
            ->joinWith('category')
            ->where(['>', 'link_cat', 0])
            ->andWhere(['is_open' => Article::IS_OPEN]);

        if (!empty($resourceType)) {
            $query->andWhere(['resource_type' => $resourceType]);
        }

        $categoryList = $query->distinct()->all();
        if (!empty($categoryList)) {
            foreach ($categoryList as $item) {
                if (!empty($item->category['cat_name'])) {
                    $categoryItem[$item->link_cat] = $item->category['cat_name'];
                }
            }
        }

        return $categoryItem;
    }

    /**
     * 获取在用的 场景
     * @param string $resourceType
     * @return array
     */
    public static function getInUsedSceneMap($resourceType = '')
    {
        $inUsedSceneMap = [];
        $query = self::find()
            ->select(['scene'])
            ->where(['is_open' => Article::IS_OPEN])
            ->andWhere(['!=', 'scene', '']);

        if (!empty($resourceType)) {
            $query->andWhere(['resource_type' => $resourceType]);
        }

        $articleList = $query->distinct()->all();
        if (!empty($articleList)) {
            foreach ($articleList as $article) {
                if (!empty($article->scene)) {
                    $inUsedSceneMap[$article->scene] = $article->scene;
                }
            }
        }

        return $inUsedSceneMap;
    }

    /**
     * 文章关联的品牌
     * @return \yii\db\ActiveQuery
     */
    public function getBrand()
    {
        return $this->hasOne(Brand::className(), ['brand_id' => 'brand_id']);
    }
}
