<?php

namespace common\models;

use common\helper\CacheHelper;
use common\helper\DateTimeHelper;
use common\helper\GoodsHelper;
use common\helper\ImageHelper;
use common\helper\NumberHelper;
use Yii;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use common\behaviors\UploadImageBehavior;
use yii\helpers\VarDumper;

/**
 * This is the model class for table "o_event".
 *
 * @property integer $event_id
 * @property integer $event_type
 * @property string $event_name
 * @property string $event_desc
 * @property integer $pkg_id
 * @property integer $rule_id
 * @property integer $start_time
 * @property integer $end_time
 * @property integer $updated_at
 * @property integer $updated_by
 * @property integer $is_active
 * @property string $banner
 * @property string $url
 * @property string $bgcolor
 * @property integer $times_limit
 * @property string $pre_time
 * @property string $sub_type
 * @property integer $sort_order
 * @property string $effective_scope_type
 * @property integer $auto_set_invalid
 * @property integer $receive_type
 * @property integer $hot
 */
class Event extends \yii\db\ActiveRecord
{
    const IS_NOT_ACTIVE = 0;
    const IS_ACTIVE = 1;

    const EVENT_TYPE_FULL_GIFT  = 1;
    const EVENT_TYPE_FULL_CUT   = 2;
    const EVENT_TYPE_COUPON     = 3;
    const EVENT_TYPE_WULIAO     = 4;

    const EFFECTIVE_SCOPE_TYPE_ALL      = 'all';
    const EFFECTIVE_SCOPE_TYPE_ZHIFA    = 'zhifa';
    const EFFECTIVE_SCOPE_TYPE_BRAND    = 'brand';
    const EFFECTIVE_SCOPE_TYPE_GOODS    = 'goods';

    const AUTO_DESTROY_YES  = 1;
    const AUTO_DESTROY_NO   = 0;

    const RECEIVE_TYPE_AUTO = 0;   //  订单被动使用，满减活动
    const RECEIVE_TYPE_DRAW = 1;  //  用户主动领取
    const RECEIVE_TYPE_GIVE = 2;  //  后台手动赠送
    const RECEIVE_TYPE_SEND = 3;  //  系统自动赠送，未启用，

    public static $is_active_map = [
        self::IS_NOT_ACTIVE => '无效',
        self::IS_ACTIVE     => '有效',
    ];

    public static $is_active_img_map = [
        self::IS_NOT_ACTIVE => '<span class="glyphicon glyphicon-remove"> 无效 </span>',
        self::IS_ACTIVE     => '<span class="glyphicon glyphicon-ok"> 有效 </span>',
    ];

    public static $eventTypeMap = [
        self::EVENT_TYPE_FULL_GIFT  => '满赠',        //  o_event_rule
        self::EVENT_TYPE_FULL_CUT   => '满减',        //  o_full_cut_rule
        self::EVENT_TYPE_COUPON     => '优惠券',       //  o_full_cut_rule
        self::EVENT_TYPE_WULIAO     => '物料配比',      //  o_event_rule
    ];

    public static $eventTagMap = [
        self::EVENT_TYPE_FULL_GIFT  => 3,
        self::EVENT_TYPE_FULL_CUT   => 7,
        self::EVENT_TYPE_COUPON     => 8, //    优惠券要区分是否主动领券 标签暂时不显示
    ];

    public static $effectiveScopeTypeMap = [
        self::EFFECTIVE_SCOPE_TYPE_ALL      => '全场',
        self::EFFECTIVE_SCOPE_TYPE_ZHIFA    => '直发',
        self::EFFECTIVE_SCOPE_TYPE_BRAND    => '品牌',
        self::EFFECTIVE_SCOPE_TYPE_GOODS    => '指定',
    ];

    public static $autoDestroyMap = [
        self::AUTO_DESTROY_YES  => '自动销毁',
        self::AUTO_DESTROY_NO   => '不自动销毁',
    ];

    /**
     * 参与活动的类型
     * @var array
     */
    public static $receiveTypeMap = [
        self::RECEIVE_TYPE_AUTO => '不需领取，自动使用',
        self::RECEIVE_TYPE_DRAW => '用户主动领取',
        self::RECEIVE_TYPE_GIVE => '后台手动赠送',
        self::RECEIVE_TYPE_SEND => '系统赠送',    //    可用于满足条件 赠送
    ];

    public function behaviors()
    {
        return ArrayHelper::merge(parent::behaviors(), [
            //  图片上传
            [
                'class' => UploadImageBehavior::className(),
                'attribute' => 'banner',
                'scenarios' => ['insert', 'update', 'create'],
                'path' => '@mRoot/data/attached/event/{event_id}/',    //  
                'storePrefix' => 'data/attached/event/{event_id}/',    //  
                'url' => Yii::$app->params['shop_config']['img_base_url'].'/event/{event_id}', 
                'thumbs' => [],
            ],
        ]); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        parent::beforeSave($insert);

        if (empty($this->bgcolor)) {
            $this->bgcolor = '#ff638a';
        }

        if (!empty($this->bgcolor)) {
            //  如果色值没有 # 则在前补
            if (!substr_count($this->bgcolor, '#', 0, 1)) {
                $this->bgcolor = '#'.$this->bgcolor;
            }
        }

        return true;
        // TODO: Change the autogenerated stub
    }



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'o_event';
    }

    /**
     * @inheritdoc
     * rule_id  废弃，在rule表里关联event,不在event中关联rule_id
     */
    public function rules()
    {
        $now = DateTimeHelper::getFormatCNDateTime(time());
        return [
            [
                ['event_name', 'event_desc', 'event_type', 'pre_time', 'start_time', 'end_time', 'updated_at', 'updated_by', 'receive_type'],
                'required'
            ],   //   'pkg_id',
            [
                [
                    'event_type', 'pkg_id', 'rule_id', 'updated_at', 'updated_by', 'is_active', 'times_limit', 'sort_order', 'receive_type', 'hot'
                ],
                'integer'
            ],
            [['event_name'], 'string', 'max' => 40],
            [['sub_type'], 'string', 'max' => 20],
            [['event_desc', 'url'], 'string', 'max' => 255],
            [['event_type'], 'default', 'value' => 1],
            ['bgcolor', 'string', 'max' => 10],
            ['bgcolor', 'default', 'value' => '#fec3d4'],
//            ['rule_id', 'required', 'on' => 'update'],
            [
                'banner',
                'image',
                'extensions' => 'jpg, jpeg, gif, png',
                'on' => ['insert', 'update']
            ],

            ['times_limit', 'default', 'value' => 0],
            ['sort_order', 'default', 'value' => 0],
            ['effective_scope_type', 'string', 'max' => 20],
            ['auto_destroy', 'integer', 'max' => 255],
            ['auto_destroy', 'default', 'value' => 0],
            ['receive_type', 'default', 'value' => 0],
            ['rule_id', 'default', 'value' => 0],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'event_id' => '活动ID',
            'event_type' => '类型',
            'event_name' => '活动名称',
            'event_desc' => '规则介绍',
            'pkg_id' => '商品包ID',
            'rule_id' => '策略ID',
            'start_time' => '开始时间',
            'end_time' => '结束时间',
            'updated_at' => '最近编辑时间',
            'updated_by' => '创建人ID',
            'is_active' => '是否有效',
            'banner' => '活动Banner图',
            'url' => '活动页面URL',
            'bgcolor' => '活动页背景色',
            'times_limit' => '参与次数上限',  //  0表示不限制
            'pre_time' => '预热开始时间', //  GMT时间戳
            'sub_type' => '子类型', //  GMT时间戳
            'sort_order' => '排序值',
            'effective_scope_type' => '生效范围类型',
            'auto_destroy' => '过期是否销毁',
            'receive_type' => '获取方式',
            'hot' => '是否热门',
        ];
    }

    /**
     * 获取 满赠送活动、物料配比 规则
     * @return \yii\db\ActiveQuery
     */
    public function getFullGiftRule()
    {
        return $this->hasMany(EventRule::className(), ['event_id' => 'event_id']);
    }
//    /**
//     * 获取满赠活动规则
//     * @return \yii\db\ActiveQuery
//     */
//    public function getEventRule()
//    {
//        return $this->hasOne(EventRule::className(), ['rule_id' => 'rule_id']);
//    }

    /**
     * 获取满减活动规则
     * @return \yii\db\ActiveQuery
     */
    public function getFullCutRule()
    {
        return $this->hasMany(FullCutRule::className(), ['event_id' => 'event_id'])
            ->andOnCondition([
                'status' => FullCutRule::STATUS_VALID,
            ])->orderBy([
                'above' => SORT_ASC,
            ]);
    }

    /**
     * 获取活动对应的商品包
     * @return \yii\db\ActiveQuery
     */
    public function getGoodsPkg()
    {
        return $this->hasOne(GoodsPkg::className(), ['pkg_id' => 'pkg_id']);
    }

    /**
     * 获取活动对应的商品
     * @return \yii\db\ActiveQuery
     */
    public function getEventToGoods()
    {
        return $this->hasMany(EventToGoods::className(), ['event_id' => 'event_id']);
    }

    /**
     * 获取活动对应的品牌
     * @return \yii\db\ActiveQuery
     */
    public function getEventToBrand()
    {
        return $this->hasMany(EventToBrand::className(), ['event_id' => 'event_id']);
    }

    public function getBrandList() {
        return $this->hasMany(Brand::className(), [
            'brand_id' => 'brand_id',
        ])->viaTable(EventToBrand::tableName(), [
            'event_id' => 'event_id',
        ]);
    }

    public function getGoods()
    {
        return $this->hasMany(Goods::className(),['goods_id' => 'goods_id'])->via('eventToGoods');
    }

    public function getCouponPkg() {
        return $this->hasOne(CouponPkg::className(), [
            'event_id' => 'event_id',
        ]);
    }

    public function enableCouponPkg($enable) {
        if ($enable) {
            if (!empty($this->couponPkg)) {
                $this->couponPkg->enable = 1;
                $this->couponPkg->save();
            }
            else {
                $couponPkg = new CouponPkg();
                $couponPkg->enable = 1;
                $this->link('couponPkg', $couponPkg);
            }
        }
        else {
            if (!empty($this->couponPkg)) {
                $this->couponPkg->enable = 0;
                $this->couponPkg->save();
            }
        }
    }

    public function isCouponPkg() {
        if (empty($this->couponPkg)) {
            return false;
        }
        return $this->couponPkg->enable;
    }

    /**
     * 领取优惠券
     * @param $userId
     * @param $ruleId
     * @param bool $force 是否强制领取
     * @return array
     */
    public function takeCoupon($userId, $ruleId, $force = false) {
        Yii::warning('userId = '. $userId. ', ruleId = '. $ruleId. ', force = '. $force, __METHOD__);

        if (!$force && $this->receive_type != self::RECEIVE_TYPE_DRAW) {
            Yii::error('当前活动还不可参与', __METHOD__);
            return [
                'code' => 8,
                'msg' => '当前活动还不可参与',
            ];
        }

        if ($this->event_type != Event::EVENT_TYPE_COUPON) {
            Yii::error('活动类型不是优惠券', __METHOD__);
            return [
                'code' => 1,
                'msg' => '活动类型不是优惠券',
            ];
        }

        if (empty($ruleId)) {
            Yii::error('缺少规则ID', __METHOD__);
            return [
                'code' => 2,
                'msg' => '缺少规则ID',
            ];
        }

        //可领取次数
        $timesLimit = $this['times_limit'];

        if (empty($this['fullCutRule'])) {
            Yii::error('没有满减规则', __METHOD__);
            return [
                'code' => 3,
                'msg' => '缺少参数',
            ];
        }

        foreach ($this['fullCutRule'] as $rule) {
            if ($ruleId == $rule['rule_id']) {
                $takenCount = $rule->getCouponCountTaken($userId);
                //已经超出了可领取数量
                if ($takenCount >= $timesLimit) {
                    Yii::error('领取数量限制 takenCount = '. $takenCount. ', timesLimit = '. $timesLimit. ', ruleId = '. $ruleId, __METHOD__);
                    return [
                        'code' => 4,
                        'msg' => '领取数量超出限制',
                    ];
                }

                $couponCanTake = CouponRecord::find()->where([
                    'rule_id' => $ruleId,
                ])->andWhere([
                    'user_id' => 0,
                ])->one();

                if (empty($couponCanTake)) {
                    Yii::error('券已经领完了 ruleId = '. $ruleId, __METHOD__);
                    return [
                        'code' => 5,
                        'msg' => '券已经领完了',
                    ];
                }

                Yii::warning('coupon = '. VarDumper::export($couponCanTake), __METHOD__);

                $couponCanTake->user_id = $userId;
                $couponCanTake->received_at = DateTimeHelper::gmtime();

                Yii::warning('coupon = '. VarDumper::export($couponCanTake), __METHOD__);

                if (!$couponCanTake->save()) {
                    Yii::warning('err = '. json_encode($couponCanTake->errors), __METHOD__);
                    return [
                        'code' => 6,
                        'msg' => '领取优惠券失败',
                    ];
                }

                $takenCount = $rule->getCouponCountTaken($userId);
                $canTakeCount = $this->times_limit - $takenCount;
                if ($canTakeCount <= 0) {
                    return [
                        'code' => 0,
                        'msg' => '领取优惠券成功',
                    ];
                }
                else {
                    return [
                        'code' => 0,
                        'msg' => '领取成功，还可以领取'. $canTakeCount. '张',
                    ];
                }
            }
        }
        return [
            'code' => 7,
            'msg' => '缺少活动规则',
        ];
    }

    public static function fullCutGoodsList()
    {
        $cutGoodsList = [];

        $fullCutEvent = Event::find()
            ->joinWith([
                'goods goods' => function ($query) {
                    $query->andOnCondition([
                        'goods.is_on_sale' => 1,
                        'goods.is_delete' => 0,
                    ]);
                },
                'goods.tags tags',
                'eventToBrand eventToBrand',
                'eventToBrand.brand brand',
                'eventToBrand.brand.brandGoodsList' //  brandGoodsList关系中有条件， 这里用别名会报错，条件写到闭包里更合适，关系应该纯粹
            ])->where([
                'event_type' => Event::EVENT_TYPE_FULL_CUT,
                'is_active' => Event::IS_ACTIVE,
            ])->andWhere([
                '>', 'end_time', date('Y-m-d H:i:s', time())
            ])->orderBy([
                new Expression('FIELD (goods.goods_number, 0)'),
                'sort_order' => SORT_DESC,
                'event_id' => SORT_DESC,
            ])->one();


        if (!empty($fullCutEvent)) {
            $event = [
                'event_name' => $fullCutEvent->event_name,
                'event_desc' => $fullCutEvent->event_desc,
                'start_time' => $fullCutEvent->start_time,
                'end_time' => $fullCutEvent->end_time,
            ];

            //  按品牌设置的满减活动
            if (!empty($fullCutEvent->eventToBrand)) {
                foreach ($fullCutEvent->eventToBrand as $brandItem) {
                    if (!empty($brandItem->brand->brandGoodsList)) {
                        foreach ($brandItem->brand->brandGoodsList as $goods) {
                            $user_discount = ($goods['discount_disable'] == 1) ? 1 : $_SESSION['discount'];
                            $price = price_format($user_discount * $goods['min_price']);
                            $box_num =  empty($goods['number_per_box']) ? null : $goods['number_per_box'];
                            $cutGoodsList[] = [
                                'goods_id' => $goods['goods_id'],
                                'sort_order' => $goods['sort_order'],
                                'complex_order' => $goods['complex_order'],
                                'start_num' => $goods['start_num'],
                                'brief' => $goods['goods_brief'],
                                'start_number' => $goods['start_num'],
                                'measure_unit' => empty($goods['measure_unit']) ? '件' : $goods['measure_unit'],
                                'goods_name' => $goods['goods_name'],
                                'min_num' => $goods['start_num'],
                                'market_price' => $goods['market_price'],
                                'unit' => $goods['measure_unit'],
                                'max_num' => $goods['goods_number'] <=0 ? 0 : $goods['goods_number'],
                                'price' => $price,
                                'goods_price' => $price,
                                'box_num' => $box_num,
                                'buy_by_box' => $goods['buy_by_box'],
                                'goods_thumb' => ImageHelper::get_image_path($goods['goods_thumb']),
                                'pc_url' => '/goods.php?id='. $goods['goods_id'],
                                'm_url' =>  '/default/goods/index/id/' . $goods['goods_id'] . '.html',
                                'is_tc' => false,   //  是不是团采，团采商品不参与满减，所以满减的商品不是团采，当前用于区分活动聚合页的样式
                            ];
                        }
                    }
                }
            }

            $userDiscount = 1.0;
            if (!empty($userModel)) {
                $user_rank_map = CacheHelper::getUserRankCache();
                if (!empty($user_rank_map[$userModel->user_rank]['discount'])) {
                    $userDiscount = $user_rank_map[$userModel->user_rank]['discount'] / 100.0;
                }
            }

            $userDiscount = $userDiscount ?: $_SESSION['discount'];

            //  商品直接参与的满减活动
            if (!empty($fullCutEvent['goods'])) {
                foreach ($fullCutEvent['goods'] as $goods) {
                    $user_discount = ($goods['discount_disable'] == 1) ? 1 : $userDiscount;
                    $price = NumberHelper::price_format($user_discount * $goods['min_price']);
                    $box_num =  empty($goods['number_per_box']) ? null : $goods['number_per_box'];
                    $cutGoodsList[] = [
                        'goods_id' => $goods['goods_id'],
                        'sort_order' => $goods['sort_order'],
                        'complex_order' => $goods['complex_order'],
                        'goods_name' => $goods['goods_name'],
                        'start_num' => $goods['start_num'],
                        'start_number' => $goods['start_num'],
                        'min_num' => $goods['start_num'],
                        'measure_unit' => empty($goods['measure_unit']) ? '件' : $goods['measure_unit'],
                        'market_price' => $goods['market_price'],
                        'unit' => $goods['measure_unit'],
                        'max_num' => $goods['goods_number'] <=0 ? 0 : $goods['goods_number'],
                        'price' => $price,
                        'goods_price' => $price,
                        'buy_by_box' => $goods['buy_by_box'],
                        'box_num' => $box_num,
                        'goods_thumb' => ImageHelper::get_image_path($goods['goods_thumb']),
                        'pc_url' => '/goods.php?id='. $goods['goods_id'],
                        'm_url' =>  '/default/goods/index/id/' . $goods['goods_id'] . '.html',
                        'is_tc' => false,   //  是不是团采，团采商品不参与满减，所以满减的商品不是团采，当前用于区分活动聚合页的样式

                        'goods_time' => GoodsHelper::timeStatus($fullCutEvent['start_time'],$fullCutEvent['end_time']),
                    ];
                }
            }
        }

        //  按商品的综合排序值排序
        if (!empty($cutGoodsList)) {
            //  与大列表保持一致，优先sort_order倒序，其次 complex_order 倒序
            usort($cutGoodsList, function ($a, $b) {
                if ($a['sort_order'] == $b['sort_order']) {
                    if ($a['complex_order'] == $b['complex_order']) {
                        return 0;
                    } else {
                        return $a['complex_order'] > $b['complex_order'] ? -1 : 1;
                    }
                } else {
                    return $a['sort_order'] > $b['sort_order'] ? -1 : 1;
                }
            });
        }

        return [
            'event' => $event,
            'cutGoodsList' => $cutGoodsList,
        ];
    }

    /**
     * 获取 满减、优惠券 活动的 规则（多个规则拼接成字符串）
     * @return string
     */
    public function getRuleNameStr()
    {
        $ruleNameStr = '';
        foreach ($this->fullCutRule as $rule) {
            $ruleNameStr .= $rule->rule_name.';';
        }
        $ruleNameStr = trim($ruleNameStr, ';');

        return $ruleNameStr;
    }
}
