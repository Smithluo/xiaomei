<?php

namespace backend\models;


use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use common\helper\DateTimeHelper;

/**
 * ScUsersSearch represents the model behind the search form about `common\models\Users`.
 */
class ScUsersSearch extends Users
{
    public $doneAmount;
    public $reg_time_start;
    public $reg_time_end;
    public $last_login_start;
    public $last_login_end;
    public $is_identify;
    public $duty;
    public $channel;
    public $sale_count;
    public $store_number;
    public $imports;
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'sex', 'pay_points', 'rank_points', 'address_id', 'zone_id', 'reg_time', 'last_login',
                'visit_count', 'user_rank', 'is_special', 'parent_id', 'flag', 'is_validated', 'bank_info_id',
                'servicer_user_id', 'servicer_super_id', 'servicer_info_id', 'is_checked', 'user_type',
                'province', 'city', 'int_balance', 'is_identify', 'imports', 'store_number', 'channel', 'duty', 'sale_count'], 'integer'],
            [['email', 'user_name', 'password', 'question', 'answer', 'birthday', 'last_time', 'last_ip', 'ec_salt',
                'salt', 'alias', 'msn', 'qq', 'office_phone', 'home_phone', 'mobile_phone', 'company_name',
                'passwd_question', 'passwd_answer', 'headimgurl', 'openid', 'qq_open_id', 'aite_id', 'unionid',
                'wx_pc_openid', 'licence_image', 'brand_id_list', 'auth_key', 'access_token', 'nickname',
                'is_checked', 'checked_note', 'user_type', 'doneAmount', 'int_balance'], 'safe'],
            [['checked_note', 'shopfront_pic', 'biz_license_pic'], 'string', 'max' => 255],
            ['channel', 'string', 'max' => 60],
            [['user_money', 'frozen_money', 'credit_line'], 'number'],
            [['reg_time_start', 'reg_time_end', 'last_login_start', 'last_login_end'], 'safe'],
        ];
    }

    public function attributeLabels()
    {
        return array_merge(parent::attributeLabels(), [
            'doneAmount' => '完成订单金额',
            'reg_time_start' => '注册时间开始',
            'reg_time_end' => '注册时间结束',
            'last_login_start' => '最后一次登录开始',
            'last_login_end' => '最后一次登录结束',
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $integralTb = Integral::tableName();
        $orderInfoTb = OrderInfo::tableName();
        $tmpIntBalanceSql = 'SELECT SUM(integral) FROM '.$integralTb.
            ' WHERE o_integral.status = '.Integral::STATUS_THAW.
            ' AND o_users.user_id = '.$integralTb.'.user_id';
        $totalAmountSql = 'SELECT SUM(goods_amount) FROM '.$orderInfoTb.
            ' WHERE o_order_info.order_status = '.OrderInfo::ORDER_STATUS_REALLY_DONE.
            ' AND o_users.user_id = '.$orderInfoTb.'.user_id';
        $payTimesSql = 'SELECT COUNT(DISTINCT group_id) FROM '.$orderInfoTb.
            ' WHERE '.$orderInfoTb.'.pay_status = '.OrderInfo::PAY_STATUS_PAYED.
            ' AND o_users.user_id = '.$orderInfoTb.'.user_id';
        $lastPayTimeSql = 'SELECT MAX(pay_time) AS lastPayTime FROM '.$orderInfoTb.
            ' WHERE '.$orderInfoTb.'.pay_status = '.OrderInfo::PAY_STATUS_PAYED.
            ' AND o_users.user_id = '.$orderInfoTb.'.user_id';

        $query = Users::find()->joinWith([
            'extension extension'
        ]);
        $query->select([
                'o_users.*',
                '('.$tmpIntBalanceSql.') AS tmpIntBalance',
                '('.$totalAmountSql.') AS totalAmount',
                '('.$payTimesSql.') AS payTimes',
                '('.$lastPayTimeSql.') AS lastPayTime',
            ]);

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        $dataProvider->setSort([
            'attributes' => [
                'user_id',
                'user_name',
                'mobile_phone',
                'company_name',
                'channel',
                'user_type',
                'reg_time',
                'last_login',
                'visit_count',
                'is_checked',
                'user_rank',
                'province',
                'city',
                'checked_note',
                'int_balance',
                'totalAmount' => [
                    'asc'   => ['totalAmount' => SORT_ASC],
                    'desc'  => ['totalAmount' => SORT_DESC],
                ],
                'tmpIntBalance' => [
                    'asc'   => ['tmpIntBalance' => SORT_ASC],
                    'desc'  => ['tmpIntBalance' => SORT_DESC],
                ],
                'payTimes' => [
                    'asc'   => ['payTimes' => SORT_ASC],
                    'desc'  => ['payTimes' => SORT_DESC],
                ],
                'lastPayTime' => [
                    'asc'   => ['lastPayTime' => SORT_ASC],
                    'desc'  => ['lastPayTime' => SORT_DESC],
                ],
            ]
        ]);

        // grid filtering conditions
        $query->andFilterWhere([
            Users::tableName().'.user_id' => $this->user_id,
            'sex' => $this->sex,
            'user_type' => $this->user_type,
            'birthday' => $this->birthday,
            'user_money' => $this->user_money,
            'frozen_money' => $this->frozen_money,
            'pay_points' => $this->pay_points,
            'rank_points' => $this->rank_points,
            'address_id' => $this->address_id,
            'zone_id' => $this->zone_id,
            'reg_time' => $this->reg_time,
            'last_login' => $this->last_login,
            'last_time' => $this->last_time,
            'visit_count' => $this->visit_count,
            'user_rank' => $this->user_rank,
            'is_special' => $this->is_special,
            'parent_id' => $this->parent_id,
            'flag' => $this->flag,
            'is_validated' => $this->is_validated,
            'credit_line' => $this->credit_line,
            'bank_info_id' => $this->bank_info_id,
            'servicer_user_id' => $this->servicer_user_id,
            'servicer_super_id' => $this->servicer_super_id,
            'servicer_info_id' => $this->servicer_info_id,
            'is_checked' => $this->is_checked,
            'user_rank' => $this->user_rank,
            Users::tableName().'.province' => $this->province,
            Users::tableName().'.city' => $this->city,
        ]);

        //  采购商  小B端 筛选
        if (isset($params['buyer']) && $params['buyer']) {
            $query->andFilterWhere(['brand_id_list' => 0])
                ->andFilterWhere(['>', 'mobile_phone', '10000000000']);
            /*
            $query->andFilterWhere(['servicer_info_id' => 0])
                ->andFilterWhere(['brand_id_list' => 0])
                ->andFilterWhere(['>', 'mobile_phone', '10000000000'])
                ->orFilterWhere(['is_checked' => Users::IS_CHECKED_STATUS_PASSED]);
            */
        }

        $query->andFilterWhere(['like', 'email', $this->email])
            ->andFilterWhere(['like', 'user_name', $this->user_name])
            ->andFilterWhere(['like', 'password', $this->password])
            ->andFilterWhere(['like', 'question', $this->question])
            ->andFilterWhere(['like', 'answer', $this->answer])
            ->andFilterWhere(['like', 'last_ip', $this->last_ip])
            ->andFilterWhere(['like', 'ec_salt', $this->ec_salt])
            ->andFilterWhere(['like', 'salt', $this->salt])
            ->andFilterWhere(['like', 'alias', $this->alias])
            ->andFilterWhere(['like', 'msn', $this->msn])
            ->andFilterWhere(['like', 'qq', $this->qq])
            ->andFilterWhere(['like', 'office_phone', $this->office_phone])
            ->andFilterWhere(['like', 'home_phone', $this->home_phone])
            ->andFilterWhere(['like', 'mobile_phone', $this->mobile_phone])
            ->andFilterWhere(['like', 'company_name', $this->company_name])
            ->andFilterWhere(['like', 'passwd_question', $this->passwd_question])
            ->andFilterWhere(['like', 'passwd_answer', $this->passwd_answer])
            ->andFilterWhere(['like', 'headimgurl', $this->headimgurl])
            ->andFilterWhere(['like', 'openid', $this->openid])
            ->andFilterWhere(['like', 'qq_open_id', $this->qq_open_id])
            ->andFilterWhere(['like', 'aite_id', $this->aite_id])
            ->andFilterWhere(['like', 'unionid', $this->unionid])
            ->andFilterWhere(['like', 'wx_pc_openid', $this->wx_pc_openid])
            ->andFilterWhere(['like', 'licence_image', $this->licence_image])
            ->andFilterWhere(['like', 'brand_id_list', $this->brand_id_list])
            ->andFilterWhere(['like', 'auth_key', $this->auth_key])
            ->andFilterWhere(['like', 'access_token', $this->access_token])
            ->andFilterWhere(['like', 'checked_note', $this->checked_note])
            ->andFilterWhere(['like', 'nickname', $this->nickname])
            ->andFilterWhere(['>', 'int_balance', $this->int_balance]);



        //渠道
        if($this->channel) {
            $query->andFilterWhere(['channel' => $this->channel]);
        }
        //月销量
        if($this->sale_count) {
            $query->andFilterWhere(['extension.month_sale_count' => $this->sale_count]);
        }
        //店铺数量
        if($this->store_number) {
            $query->andFilterWhere([ '>=', 'extension.store_number' , $this->store_number]);
        }
        //进出口占比
        if($this->imports) {
            $query->andFilterWhere(['extension.imports_per' => $this->imports]);
        }

        if($this->duty) {
            $query->andFilterWhere(['extension.duty' => $this->duty]);
        }

        if(  $this->is_identify === '0' ) {
            $query->andFilterWhere(['extension.identify' => $this->is_identify])->andFilterWhere([ 'NOT', [ 'extension.user_id' => 0 ]]);
        }   elseif($this->is_identify == 1) {
            $query->andFilterWhere(['extension.identify' => $this->is_identify]);
        }   elseif($this->is_identify == 2) {
            $query->andFilterWhere(['extension.identify' => $this->is_identify]);
        }
        //  查询时段
        $period = $this->chosePeriod();
        if (!empty($period['reg_time_start'])) {
            $query->andFilterWhere(['between', 'reg_time', $period['reg_time_start'], $period['reg_time_end']]);
        }
        if (!empty($period['last_login_start'])) {
            $query->andFilterWhere(['between', 'last_login', $period['last_login_start'], $period['last_login_end']]);
        }

        if($this->doneAmount) {
            $query->having(['>', 'totalAmount', $this->doneAmount]);
        }

        return $dataProvider;
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function searchForExport($params)
    {
        $orderInfoTb = OrderInfo::tableName();
        $totalAmountSql = 'SELECT SUM(goods_amount) FROM '.$orderInfoTb.
            ' WHERE o_order_info.order_status = '.OrderInfo::ORDER_STATUS_REALLY_DONE.
            ' AND o_users.user_id = '.$orderInfoTb.'.user_id';
        $payTimesSql = 'SELECT COUNT(DISTINCT group_id) FROM '.$orderInfoTb.
            ' WHERE '.$orderInfoTb.'.pay_status = '.OrderInfo::PAY_STATUS_PAYED.
            ' AND o_users.user_id = '.$orderInfoTb.'.user_id';
        $lastPayTimeSql = 'SELECT MAX(pay_time) AS lastPayTime FROM '.$orderInfoTb.
            ' WHERE '.$orderInfoTb.'.pay_status = '.OrderInfo::PAY_STATUS_PAYED.
            ' AND o_users.user_id = '.$orderInfoTb.'.user_id';

        $query = Users::find();
        $query->select([
            'o_users.*',
            '('.$totalAmountSql.') AS totalAmount',
            '('.$payTimesSql.') AS payTimes',
            '('.$lastPayTimeSql.') AS lastPayTime',
        ])->joinWith([
            'extension extension'
        ])->with([
            'servicerUser',
            'servicerUser.supserServicerUser'
        ]);

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pagesize' => Users::find()->count(),
            ],
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        $dataProvider->setSort([
            'attributes' => [
                'user_id',
                'user_name',
                'mobile_phone',
                'company_name',
                'channel',
                'user_type',
                'reg_time',
                'last_login',
                'visit_count',
                'is_checked',
                'user_rank',
                'province',
                'city',
                'checked_note',
                'totalAmount' => [
                    'asc' => ['totalAmount' => SORT_ASC],
                    'desc' => ['totalAmount' => SORT_DESC],
                ],
            ]
        ]);

        // grid filtering conditions
        $query->andFilterWhere([
            Users::tableName().'.user_id' => $this->user_id,
            'sex' => $this->sex,
            'birthday' => $this->birthday,
            'user_type' => $this->user_type,
            'user_money' => $this->user_money,
            'frozen_money' => $this->frozen_money,
            'pay_points' => $this->pay_points,
            'rank_points' => $this->rank_points,
            'address_id' => $this->address_id,
            'zone_id' => $this->zone_id,
            'reg_time' => $this->reg_time,
            'last_login' => $this->last_login,
            'last_time' => $this->last_time,
            'visit_count' => $this->visit_count,
            'user_rank' => $this->user_rank,
            'is_special' => $this->is_special,
            'parent_id' => $this->parent_id,
            'flag' => $this->flag,
            'is_validated' => $this->is_validated,
            'credit_line' => $this->credit_line,
            'bank_info_id' => $this->bank_info_id,
            'servicer_user_id' => $this->servicer_user_id,
            'servicer_super_id' => $this->servicer_super_id,
            'servicer_info_id' => $this->servicer_info_id,
            'is_checked' => $this->is_checked,
            'user_rank' => $this->user_rank,
            Users::tableName().'.province' => $this->province,
            Users::tableName().'.city' => $this->city,
        ]);

        //  过滤品牌商 过滤服务商 过滤手机号明显不正确 的用户
        $query->andFilterWhere(['brand_id_list' => 0])
            ->andFilterWhere(['servicer_info_id' => 0])
            ->andFilterWhere(['>', 'mobile_phone', '10000000000']);

        $query->andFilterWhere(['like', 'email', $this->email])
            ->andFilterWhere(['like', 'user_name', $this->user_name])
            ->andFilterWhere(['like', 'channel', $this->channel])
            ->andFilterWhere(['like', 'password', $this->password])
            ->andFilterWhere(['like', 'question', $this->question])
            ->andFilterWhere(['like', 'answer', $this->answer])
            ->andFilterWhere(['like', 'last_ip', $this->last_ip])
            ->andFilterWhere(['like', 'ec_salt', $this->ec_salt])
            ->andFilterWhere(['like', 'salt', $this->salt])
            ->andFilterWhere(['like', 'alias', $this->alias])
            ->andFilterWhere(['like', 'msn', $this->msn])
            ->andFilterWhere(['like', 'qq', $this->qq])
            ->andFilterWhere(['like', 'office_phone', $this->office_phone])
            ->andFilterWhere(['like', 'home_phone', $this->home_phone])
            ->andFilterWhere(['like', 'mobile_phone', $this->mobile_phone])
            ->andFilterWhere(['like', 'company_name', $this->company_name])
            ->andFilterWhere(['like', 'passwd_question', $this->passwd_question])
            ->andFilterWhere(['like', 'passwd_answer', $this->passwd_answer])
            ->andFilterWhere(['like', 'headimgurl', $this->headimgurl])
            ->andFilterWhere(['like', 'openid', $this->openid])
            ->andFilterWhere(['like', 'qq_open_id', $this->qq_open_id])
            ->andFilterWhere(['like', 'aite_id', $this->aite_id])
            ->andFilterWhere(['like', 'unionid', $this->unionid])
            ->andFilterWhere(['like', 'wx_pc_openid', $this->wx_pc_openid])
            ->andFilterWhere(['like', 'licence_image', $this->licence_image])
            ->andFilterWhere(['like', 'brand_id_list', $this->brand_id_list])
            ->andFilterWhere(['like', 'auth_key', $this->auth_key])
            ->andFilterWhere(['like', 'access_token', $this->access_token])
            ->andFilterWhere(['like', 'checked_note', $this->checked_note])
            ->andFilterWhere(['like', 'nickname', $this->nickname]);

        $period = $this->chosePeriod();
        if (!empty($period['reg_time_start'])) {
            $query->andFilterWhere(['between', 'reg_time', $period['reg_time_start'], $period['reg_time_end']]);
        }
        if (!empty($period['last_login_start'])) {
            $query->andFilterWhere(['between', 'last_login', $period['last_login_start'], $period['last_login_end']]);
        }

        if($this->is_identify === '0' ) {
            $query->andFilterWhere(['extension.identify' => $this->is_identify])->andFilterWhere([ 'NOT', [ 'extension.user_id' => 0 ]]);
        }   elseif($this->is_identify == 1) {
            $query->andFilterWhere(['extension.identify' => $this->is_identify]);
        }   elseif($this->is_identify == 2) {
            $query->andFilterWhere(['extension.identify' => $this->is_identify]);
        }

        if($this->doneAmount) {
            $query->having(['>', 'totalAmount', $this->doneAmount]);
        }

        return $dataProvider;
    }

    private function chosePeriod()
    {
        $period = [];
        //  设置 查询注册时间 不设 默认开始时间
        $oneMonthAgo = time() - 30 * 86400;
        /*$defaultStart_date = DateTimeHelper::getFormatDateTime($oneMonthAgo);
        if (!$this->reg_time_start) {
            $this->reg_time_start = $defaultStart_date;
        }*/
        if (!$this->reg_time_end) {
            $this->reg_time_end = date('Y-m-d');
        }
        //  设置 查询最近登录时间  不设 默认开始时间
        /*if (!$this->last_login_start) {
            $this->last_login_start = $defaultStart_date;
        }*/
        if (!$this->last_login_end) {
            $this->last_login_end = date('Y-m-d');
        }
        //  注册时段
        if ($this->reg_time_start) {
            $period['reg_time_start']   = DateTimeHelper::getFormatGMTTimesTimestamp($this->reg_time_start);
        }
        $period['reg_time_end']     = DateTimeHelper::getFormatGMTTimesTimestamp($this->reg_time_end) + 86399;
        //  登录时段
        if ($this->last_login_start) {
            $period['last_login_start'] = DateTimeHelper::getFormatGMTTimesTimestamp($this->last_login_start);
        }
        $period['last_login_end']   = DateTimeHelper::getFormatGMTTimesTimestamp($this->last_login_end) + 86399;

        return $period;
    }
}
