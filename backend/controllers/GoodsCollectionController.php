<?php

namespace backend\controllers;

use backend\models\Goods;
use common\models\GoodsCollectionItem;
use common\models\GoodsCollectionItemSearch;
use kartik\grid\EditableColumnAction;
use Yii;
use common\models\GoodsCollection;
use common\models\GoodsCollectionSearch;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * GoodsCollectionController implements the CRUD actions for GoodsCollection model.
 */
class GoodsCollectionController extends Controller
{

    public function actions()
    {
        $actionEditItemSort = [
            'class' => EditableColumnAction::className(),
            'modelClass' => GoodsCollectionItem::className(),
            'outputValue' => function($model, $attribute, $key, $index) {
                return $model->$attribute;
            },
            'outputMessage' => function($model, $attribute, $key, $index) {
                return '';
            },
            'showModelErrors' => true,
            'errorOptions' => ['header' => '']
        ];

        $actionEditValue = [
            'class' => EditableColumnAction::className(),
            'modelClass' => GoodsCollection::className(),
            'outputValue' => function($model, $attribute, $key, $index) {
                return $model->$attribute;
            },
            'showModelErrors' => true,
        ];

        return ArrayHelper::merge(parent::actions(), [
            'edit-item-sort' => $actionEditItemSort,
            'edit-value' => $actionEditValue,
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all GoodsCollection models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new GoodsCollectionSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single GoodsCollection model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new GoodsCollection model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new GoodsCollection();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['update', 'id' => $model->id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing GoodsCollection model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        $queryParams = Yii::$app->request->queryParams;
        $queryParams['GoodsCollectionItemSearch']['coll_id'] = $id;
        $itemSearchModel = new GoodsCollectionItemSearch();
        $itemDataProvider = $itemSearchModel->search($queryParams);

        $newItemList = [];
        for ($i = 0; $i < 3; ++$i) {
            $item = new GoodsCollectionItem();
            $newItemList[] = $item;
        }

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['update', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
                'itemDataProvider' => $itemDataProvider,
                'itemSearchModel' => $itemSearchModel,
                'newItemList' => $newItemList,
            ]);
        }
    }

    /**
     * Deletes an existing GoodsCollection model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    public function actionCreateItem($id) {
        $model = $this->findModel($id);

        $newItemList = [];
        for ($i = 0; $i < 3; ++$i) {
            $item = new GoodsCollectionItem();
            $item->coll_id = $model->id;
            $newItemList[] = $item;
        }

        if (GoodsCollectionItem::loadMultiple($newItemList, Yii::$app->request->post()) && GoodsCollectionItem::validateMultiple($newItemList)) {
            foreach ($newItemList as $item) {
                if (!empty(Goods::findOne($item->goods_id))) {
                    $item->save(false);
                }
            }
        }

        $this->redirect(['update', 'id' => $id]);
    }

    public function actionDeleteItem($id) {
        $collItem = GoodsCollectionItem::findOne($id);
        if (empty($collItem)) {
            throw new NotFoundHttpException('未找到需要删除的对象');
        }
        $collId = $collItem->coll_id;
        $collItem->delete();
        $this->redirect(['update', 'id' => $collId]);
    }

    /**
     * Finds the GoodsCollection model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return GoodsCollection the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = GoodsCollection::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
