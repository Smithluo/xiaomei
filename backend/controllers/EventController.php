<?php

namespace backend\controllers;

use backend\models\Brand;
use common\helper\DateTimeHelper;
use common\models\EventUserCount;
use common\models\User;
use common\models\Users;
use kartik\grid\EditableColumnAction;
use Yii;
use yii\db\Exception;
use yii\helpers\ArrayHelper;
use yii\helpers\VarDumper;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use backend\models\EventRule;
use backend\models\Goods;
use backend\models\Event;
use backend\models\FullCutRule;
use common\models\EventSearch;
use common\helper\TextHelper;

/**
 * EventController implements the CRUD actions for Event model.
 */
class EventController extends Controller
{
    public function actions()
    {
        return ArrayHelper::merge(parent::actions(), [
            'edit-value' => [
                'class' => EditableColumnAction::className(),
                'modelClass' => Event::className(),
                'outputValue' => function($model, $attribute, $key, $index) {
                    return ''. $model->$attribute;
                },
            ]
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

    }

    /**
     * Lists all Event models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new EventSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        $eventNameMap = Event::getEventNameMap();
        $eventDescMap = Event::getEventDescMap();
        $is_active_map = Event::$is_active_map;

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'eventNameMap' => $eventNameMap,
            'eventDescMap' => $eventDescMap,
            'is_active_map' => $is_active_map,
            'eventTypeMap' => Event::$eventTypeMap,
            'receiveTypeMap' => Event::$receiveTypeMap,
        ]);
    }

    /**
     * Displays a single Event model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        $model = $this->findModel($id);

        $model->pkgEnable = $model->isCouponPkg();

        $params = $this->getBasicParams( $model->event_type, $model->eventToGoods, $model->event_id, $model->eventToBrand);
        //  在view页面点击编辑时，要显示已选择的商品列表
        $eventToGoodsList = [];
        if (!empty($model->eventToGoods)) {
            foreach ($model->eventToGoods as $goods) {
                $eventToGoodsList[] = $goods->goods_id;
            }
        }
        $model->eventToGoodsList = $eventToGoodsList;

        $model->eventFilterGoodsList = [];

        $params['model'] = $model;
        $params['receiveTypeMap'] = Event::$receiveTypeMap;

        return $this->render('view', $params);
    }

    /**
     * Creates a new Event model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return string|\yii\web\Response
     * @throws NotFoundHttpException
     */
    public function actionCreate()
    {
        $model = new Event();
        $model->setScenario('insert');
        $model->setAttribute('pkg_id', 0);  //  新创建的活动废弃商品包，
        $model->setAttribute('pre_time', date('Y-m-d H:i:s', time()));
        $model->setAttribute('start_time', date('Y-m-d H:i:s', strtotime('+1 day')));
        $model->setAttribute('end_time', date('Y-m-d H:i:s', strtotime('+1 week')));
        $model->setAttribute('times_limit', 0);   //  默认不限制
        $model->setAttribute('receive_type', Event::RECEIVE_TYPE_AUTO);   //  默认被动生效
        $eventType = Yii::$app->request->get('event_type') ?: 1;

        //  仅当活动类型为优惠券时判定当前用户是否有权限操作
        if (
            $eventType != Event::EVENT_TYPE_COUPON
            || Yii::$app->user->can('/event/create', ['event_type' => $eventType])
        ) {
            if ($eventType) {
                $model->setAttribute('event_type', $eventType);
                if ($eventType == Event::EVENT_TYPE_FULL_CUT || $eventType == Event::EVENT_TYPE_COUPON) {
                    //  满赠活动对应规则 是 1:1，通过rule_id 直接关联，
                    //  满减活动对应规则 是 1:n  通过 full_cut_rule 的 event_id 关联
                    //  优惠券活动对应规则 是 1:1  通过 full_cut_rule 的 event_id 关联
                    $model->setAttribute('rule_id', 0);
                }
            }

            if ($model->load(Yii::$app->request->post())) {
                $event_id = $this->safeSave($model);
                if ($event_id) {
                    return $this->redirect(['view', 'id' => $event_id]);
                }
            }

            $params = $this->getBasicParams($model->event_type, [], $model->event_id, []);
            $params['model'] = $model;
            $params['receiveTypeMap'] = Event::$receiveTypeMap;

            return $this->render('create', $params);
        } else {
            throw new NotFoundHttpException('你无权操作优惠券');
        }
    }

    /**
     * Updates an existing Event model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param $id
     * @return string|\yii\web\Response
     * @throws NotFoundHttpException
     */
    public function actionUpdate($id)
    {
        ini_set('memory_limit', '1G');
        ini_set('max_execution_time', 120);

        $model = $this->findModel($id);
        $model->setScenario('update');
        $model->pkgEnable = $model->isCouponPkg();

        //  仅当活动类型为优惠券时判定当前用户是否有权限操作
        if (
            $model->event_type != Event::EVENT_TYPE_COUPON
            || Yii::$app->user->can('/event/update', ['event_type' => $model->event_type])
        ) {
            if (Yii::$app->request->isPost) {
                $post = Yii::$app->request->post();
                if ($model->load($post)) {
                    if ($this->safeSave($model)) {
                        //如果允许作为领取券包
                        $model->enableCouponPkg($model->pkgEnable);

                        return $this->redirect(['view', 'id' => $model->event_id]);
                    }
                }
            }
        } else {
            throw new NotFoundHttpException('你无权操作优惠券');
        }

        $params = $this->getBasicParams($model->event_type, $model->eventToGoods, $model->event_id, $model->eventToBrand);
        $eventToGoodsList = [];
        if (!empty($model->eventToGoods)) {
            foreach ($model->eventToGoods as $goods) {
                $eventToGoodsList[] = $goods->goods_id;
            }
        }
        $model->eventToGoodsList = $eventToGoodsList;
        $model->eventToBrandList = array_keys($params['selectedBrandList']);
        $params['model'] = $model;
        $params['receiveTypeMap'] = Event::$receiveTypeMap;

        return $this->render('update', $params);
    }

    /**
     * Deletes an existing Event model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionToogle($id)
    {
        $_model = $this->findModel($id);
        $_model->setScenario('update');
        if ($_model->is_active == Event::IS_ACTIVE) {
            $_model->setAttribute('is_active', Event::IS_NOT_ACTIVE);
        } else {
            $_model->setAttribute('is_active', Event::IS_ACTIVE);
        }

        if ($_model->save()) {
            Yii::$app->session->setFlash('success', '活动状态修改成功');
        } else {
            die(json_encode($_model->errors));
            Yii::$app->session->setFlash('faild', '活动状态修改失败'.TextHelper::getErrorsMsg($_model->errors));
        }

        $referrer = Yii::$app->request->referrer;
        return $this->redirect($referrer);
    }

    /**
     * Finds the Event model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Event the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        $model = Event::find()
            ->joinWith([
                'eventToGoods',
                'eventToGoods.goods',
                'eventToBrand',
                'eventToBrand.brand',
            ])->where([Event::tableName().'.event_id' => $id])
            ->one();

        if (!empty($model)) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    /**
     * 更新活动时 更新活动与商品的对应关系
     * @param $model
     * @return bool|string
     */
    protected function safeSave($model)
    {
        $model->updated_by = Yii::$app->user->identity->id;
        $model->updated_at = DateTimeHelper::getFormatGMTTimesTimestamp();
        $model->end_time = substr($model->end_time, 0, 10).' 23:59:59';

        if ($model->event_type != Event::EVENT_TYPE_COUPON) {
            $model->receive_type = Event::RECEIVE_TYPE_AUTO;
        }

        if (!$model->save()) {
            Yii::$app->session->setFlash('error', '活动编辑失败'.VarDumper::export($model->errors));
            return false;
        }
        $connection = Yii::$app->db;
        $transaction = $connection->beginTransaction();
        try {
            //  INSERT 或 UPDATE
//            $connection->createCommand($sql)->execute();
            if (!empty($model->event_id)) {
                $event_id = $model->event_id;
                //  删除关联表中event_id对应的所有记录
                $sql_delete_old_event_to_goods = " DELETE FROM o_event_to_goods WHERE event_id = ".$event_id;
                $connection->createCommand($sql_delete_old_event_to_goods)->execute();
                $sql_delete_old_event_to_brand = " DELETE FROM o_event_to_brand WHERE event_id = ".$event_id;
                $connection->createCommand($sql_delete_old_event_to_brand)->execute();
            } else {
                $event_id = $connection->getLastInsertId();
            }

            //  全场券、直发券 忽略参与条件
            if (in_array($model->effective_scope_type, [Event::EFFECTIVE_SCOPE_TYPE_ALL, Event::EFFECTIVE_SCOPE_TYPE_ZHIFA])) {
                //  通过 effective_scope_type = all | goods 来区分 是全场商品都参与活动还是 没有任何商品参与活动
            }
            //  品牌券忽略过滤条件和单个商品 o_event_to_brand
            elseif ($model->effective_scope_type == Event::EFFECTIVE_SCOPE_TYPE_BRAND) {
                if (!empty($model->eventToBrandList)) {
                    $sql_insert_event_to_brand = " INSERT INTO o_event_to_brand (`event_id`, `brand_id`) VALUES ";

                    foreach ($model->eventToBrandList as $brand_id) {
                        $sql_insert_event_to_brand .= '('.$event_id.', '.$brand_id.'),';
                    }

                    $sql_insert_event_to_brand = trim($sql_insert_event_to_brand, ',');
                    $sql_insert_event_to_brand .= ';';

                    $connection->createCommand($sql_insert_event_to_brand)->execute();
                } else {
                    Yii::$app->session->setFlash('warning', '没有指定哪些品牌参与活动');
                }
            }
            //  指定券， o_event_to_goods
            else {
                if (!empty($model->eventToGoodsList) || !empty($model->eventToBrandList)) {
                    $sql_insert_event_to_goods = " INSERT INTO o_event_to_goods (`event_id`, `goods_id`) VALUES ";

                    $selectedGoodsList = [];

                    //  参与活动的商品
                    if (!empty($model->eventToGoodsList)) {
                        $selectedGoodsList = $model->eventToGoodsList;
                    }

                    //  参与活动的品牌
                    if (!empty($model->eventToBrandList)) {
                        $brandGoodsList = Goods::find()
                            ->select(['goods_id'])
                            ->where([
                                'brand_id' => $model->eventToBrandList,
                                'is_on_sale' => Goods::IS_ON_SALE,
                                'is_delete' => Goods::IS_NOT_DELETE,
                            ])->asArray()
                            ->all();

                        if (!empty($brandGoodsList)) {
                            $seletedBrandGoodsList = array_column($brandGoodsList, 'goods_id');
                            if ($selectedGoodsList) {
                                $selectedGoodsList = array_merge($selectedGoodsList, $seletedBrandGoodsList);
                            } else {
                                $selectedGoodsList = $seletedBrandGoodsList;
                            }
                        }
                    }

                    //  过滤掉的商品
                    if (!empty($model->eventFilterGoodsList)) {
                        $selectedGoodsList = array_diff($selectedGoodsList, $model->eventFilterGoodsList);
                    }
                    $selectedGoodsList = array_unique($selectedGoodsList);

                    //  拼接SQL
                    foreach ($selectedGoodsList as $goodsId) {
                        $sql_insert_event_to_goods .= " ($event_id, $goodsId),";
                    }
                    $sql_insert_event_to_goods = trim($sql_insert_event_to_goods, ',');
                    $sql_insert_event_to_goods .= ';';

                    $connection->createCommand($sql_insert_event_to_goods)->execute();
                } else {
                    //  没有设置参与商品 等同于未生效
                    Yii::$app->session->setFlash('warning', '没有指定哪些品牌参与活动');
                }
            }


            $transaction->commit();
        } catch (Exception $e) {
            $transaction->rollBack();
        }

        return $event_id;
    }

    /**
     * 设置基础参数
     * @param $event_type
     * @param $eventToGoods
     * @return array
     */
    private function getBasicParams($event_type, $eventToGoods, $eventId = 0, $eventToBrand = [])
    {
        $ruleMap = [];
        $ruleLink = '';
        switch ($event_type) {
            case Event::EVENT_TYPE_FULL_GIFT :
                $ruleMap = EventRule::getRuleMap($eventId);

                $ruleLink = '/event-rule/index';
                break;

            //  满减活动可以对应多个活动规则，不使用o_event.rule_id
            case Event::EVENT_TYPE_FULL_CUT :
                $ruleMap = FullCutRule::getRuleMapByEventId($eventId);
                $ruleLink = '/full-cut-rule/index';
                break;

            //  优惠券活动对应1个活动规则，使用 event_id
            case Event::EVENT_TYPE_COUPON :
                $ruleMap = FullCutRule::getRuleMapByEventId($eventId);
                $ruleLink = '/full-cut-rule/index';
                break;
            case Event::EVENT_TYPE_WULIAO :
                $ruleMap = EventRule::getRuleMap($eventId);

                $ruleLink = '/event-rule/index';
                break;
            default :
                break;
        }


        $goodsNameList = [];
        $goodsList = Goods::getUnDeleteGoodsMap();
        if (!empty($eventToGoods)) {
            foreach ($eventToGoods as $goods) {
                if (isset($goodsList[$goods->goods_id])) {
                    $goodsNameList[] = $goodsList[$goods->goods_id];
                }
            }
        }
        $goodsBrandList = Brand::getBrandListWithStatusMap();
        $selectedBrandList = [];
        if ($eventToBrand) {
            foreach ($eventToBrand as $brandModel) {
                if (!empty($brandModel->brand['brand_name'])) {
                    $selectedBrandList[$brandModel->brand['brand_id']] = $brandModel->brand['brand_name'];
                }
            }
        }

        return [
            'ruleMap' => $ruleMap,
            'ruleLink' => $ruleLink,
            'goodsList' => $goodsList,
            'goodsNameList' => $goodsNameList,
            'goodsBrandList' => $goodsBrandList,
            'selectedBrandList' => $selectedBrandList,
            'eventTypeMap' => Event::$eventTypeMap,
            'effectiveScopeTypeMap' => Event::$effectiveScopeTypeMap,
            'autoDestroyMap' => Event::$autoDestroyMap,
        ];
    }

    public function actionExportUsersMobile($eventId)
    {
        $user = EventUserCount::find()
            ->select(['user_id'])
            ->where([
                'event_id' => $eventId
            ])
            ->asArray()
            ->all();
        $users = array_column($user, 'user_id');

        $mobile = Users::find()
            ->select(['mobile_phone'])
            ->where(['in', 'user_id' , $users])
            ->andWhere([
                'NOT', ['mobile_phone' => '']
            ])
            ->andWhere([
                'NOT', ['mobile_phone' => null]
            ])
            ->all();

        \moonland\phpexcel\Excel::export([
            'format' => 'Excel2007',
            'fileName' => '已派发优惠券的用户手机号码',
            'models' => $mobile,
            'columns' => [
                'mobile_phone',

            ], //without header working, because the header will be get label from attribute label.
            'headers' => [
                'mobile_phone' => '手机号码',
            ],
        ]);
    }
}
