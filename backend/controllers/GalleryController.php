<?php

namespace backend\controllers;

use backend\models\GalleryImg;
use backend\models\MoreGalleryImg;
use backend\models\Gallery;
use backend\models\GallerySearch;
use kartik\grid\EditableColumnAction;
use Yii;
use yii\filters\VerbFilter;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\web\NotFoundHttpException;

/**
 * GalleryController implements the CRUD actions for Gallery model.
 */
class GalleryController extends Controller
{
    public function actions()
    {
        return ArrayHelper::merge([
            'edit-value' => [
                'class' => EditableColumnAction::className(),
                'modelClass' => Gallery::className(),
                'outputValue' => function($model, $attribute, $key, $index) {
                    return ''.$model->$attribute;
                },
                'outputMessage' => function($model, $attribute, $key, $index) {
                    if ($model->hasErrors()) {
                        $errors = $model->getFirstError($attribute);
                        return $errors;
                    }
                    return '';
                },
            ],
        ], parent::actions()); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all Gallery models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new GallerySearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        $isShowMap = Gallery::$isShowMap;

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'isShowMap' => $isShowMap,
        ]);
    }

    /**
     * Displays a single Gallery model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        $galleryImgList = GalleryImg::find()
            ->where(['gallery_id' => $id])
            ->indexBy('img_id')
            ->all();
        $isShowMap = Gallery::$isShowMap;

        return $this->render('view', [
            'model' => $this->findModel($id),
            'galleryImgList' => $galleryImgList,
            'isShowMap' => $isShowMap,
        ]);
    }

    /**
     * Creates a new Gallery model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Gallery();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->gallery_id]);
        } else {
            $moreGalleryImg = [];
//            $gallery = new MoreGalleryImg();
//            $gallery->sort_order = 30000;
//            $moreGalleryImg = $gallery;

            $model->sort_order = 30000;
            $model->is_show = 1;
            return $this->render('create', [
                'model' => $model,
                'moreGalleryImg' => $moreGalleryImg,
                'galleryImgList' => [],
            ]);
        }
    }

    /**
     * Updates an existing Gallery model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if (!empty($model) && ($post = Yii::$app->request->post())) {
            if ($model->load($post)) {
                if ($model->save()) {
                    return $this->redirect(['view', 'id' => $model->gallery_id]);
                } elseif ($model->getErrors()) {
                    $this->flashError($model);
                }
            }
        } else {
            $galleryImgList = GalleryImg::find()
                ->where(['gallery_id' => $model->gallery_id])
                ->indexBy('img_id')
                ->all();

            $moreGalleryImg = [];
//            $gallery = new MoreGalleryImg();
//            $gallery->sort_order = 30000;
//            $moreGalleryImg = $gallery;

            return $this->render('update', [
                'model' => $model,
                'moreGalleryImg' => $moreGalleryImg,
                'galleryImgList' => $galleryImgList,
            ]);
        }
    }

    /**
     * Deletes an existing Gallery model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Gallery model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Gallery the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Gallery::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
