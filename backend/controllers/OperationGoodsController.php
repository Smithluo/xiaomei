<?php

namespace backend\controllers;

use backend\models\Category;
use kartik\grid\EditableColumnAction;
use Yii;
use backend\models\Goods;
use backend\models\GoodsTag;
use backend\models\Tags;
use backend\models\OperationGoodsSearch;
use common\helper\DateTimeHelper;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * OperationGoodsController implements the CRUD actions for Goods model.
 */
class OperationGoodsController extends Controller
{
    public function actions()
    {
        return ArrayHelper::merge(parent::actions(), [
            'edit-best' => [
                'class' => EditableColumnAction::className(),
                'modelClass' => Goods::className(),
                'outputValue' => function($model, $attribute, $key, $index) {
                    return ''.$model->$attribute;
                },
                'outputMessage' => function($model, $attribute, $key, $index) {
                    return '';
                },
                'showModelErrors' => true,
                'errorOptions' => ['header' => '']
            ],
            'edit-new' => [
                'class' => EditableColumnAction::className(),
                'modelClass' => Goods::className(),
                'outputValue' => function($model, $attribute, $key, $index) {
                    return ''.$model->$attribute;
                },
                'outputMessage' => function($model, $attribute, $key, $index) {
                    return '';
                },
                'showModelErrors' => true,
                'errorOptions' => ['header' => '']
            ],
            'edit-hot' => [
                'class' => EditableColumnAction::className(),
                'modelClass' => Goods::className(),
                'outputValue' => function($model, $attribute, $key, $index) {
                    return ''.$model->$attribute;
                },
                'outputMessage' => function($model, $attribute, $key, $index) {
                    return '';
                },
                'showModelErrors' => true,
                'errorOptions' => ['header' => '']
            ],
            'edit-spec' => [
                'class' => EditableColumnAction::className(),
                'modelClass' => Goods::className(),
                'outputValue' => function($model, $attribute, $key, $index) {
                    return ''.$model->$attribute;
                },
                'outputMessage' => function($model, $attribute, $key, $index) {
                    return '';
                },
                'showModelErrors' => true,
                'errorOptions' => ['header' => '']
            ],
            'edit-sort' => [
                'class' => EditableColumnAction::className(),
                'modelClass' => Goods::className(),
                'outputValue' => function($model, $attribute, $key, $index) {
                    return ''.$model->$attribute;
                },
                'outputMessage' => function($model, $attribute, $key, $index) {
                    return '';
                },
                'showModelErrors' => true,
                'errorOptions' => ['header' => '']
            ],
            'edit-keywords' => [
                'class' => EditableColumnAction::className(),
                'modelClass' => Goods::className(),
                'outputValue' => function($model, $attribute, $key, $index) {
                    return ''.$model->$attribute;
                },
                'outputMessage' => function($model, $attribute, $key, $index) {
                    return '';
                },
                'showModelErrors' => true,
                'errorOptions' => ['header' => '']
            ],
            'edit-tagIds' => [
                'class' => EditableColumnAction::className(),
                'modelClass' => Goods::className(),
                'outputValue' => function($model, $attribute, $key, $index) {
                    return ''.$model->$attribute;
                },
                'outputMessage' => function($model, $attribute, $key, $index) {
                    return '';
                },
                'showModelErrors' => true,
                'errorOptions' => ['header' => '']
            ],

        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all Goods models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new OperationGoodsSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        $cat_id_map = Category::getGoodsCatIdMap();

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'cat_id_map' => $cat_id_map,
        ]);
    }

    /**
     * Displays a single Goods model.
     * @param string $id
     * @return mixed
     */
    public function actionView($id)
    {
        $allTagIds = Tags::getAllTagIds();
        $model = Goods::find()->joinWith('tags')->where(['o_goods.goods_id' => $id])->one();

        $tags_str = '';
        if (!empty($model->tags)) {
            foreach ($model->tags as $tag) {
                $tags_str .= $allTagIds[$tag->id].' | ';
            }
        }
        $tags_str = trim($tags_str);
        $tags_str = trim($tags_str, '|');

        return $this->render('view', [
            'model' => $model,
            'tags_str' => $tags_str,
        ]);
    }

    /**
     * Creates a new Goods model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Goods();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->goods_id]);
        } else {
            return $this->render('create', [
                'model' => $model,
                'allTagIds' => Tags::getAllTagIds(),
            ]);
        }
    }

    /**
     * Updates an existing Goods model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post())) {
            //处理标签
            GoodsTag::deleteAll(['goods_id' => $model->goods_id]);
            if (!empty($model->tagIds)) {
                foreach($model->tagIds as $tagId) {
                    $goodsTag = new GoodsTag();
                    $goodsTag->goods_id = $model->goods_id;
                    $goodsTag->tag_id = $tagId;
                    $goodsTag->save();
                }
            }

            $model->last_update = DateTimeHelper::getFormatGMTTimesTimestamp(time());
            if (!$model->save()) {
                Yii::$app->session->setFlash('error', '数据保存出错，请检查数据');
            }
            return $this->redirect(['view', 'id' => $model->goods_id]);

        } else {
            foreach ($model->tags as $tag) {
                $model->tagIds[] = $tag->id;
            }

            return $this->render('update', [
                'model' => $model,
                'allTagIds' => Tags::getAllTagIds(),
            ]);
        }
    }

    /**
     * Deletes an existing Goods model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Goods model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return Goods the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Goods::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    /**
     * 复制商品
     * @param $id   商品id
     * @return string|\yii\web\Response
     */
    /*public function actionCopy($id)
    {
        $_model = Goods::find()->where(['goods_id' => $id])->asArray()->one();
        unset($_model['goods_id']);
        $model = new Goods();
        $model->setAttributes($_model);
        if ($model) {
            //  修改部分值为默认
            $model->goods_name .= '[活动]';
            $model->is_on_sale = Goods::NOT_ON_SALE;
            $model->click_count = 0;
            $model->discount_disable = Goods::DISCOUNT_DISABLE;   //  不参与全局会员折扣计算
            $model->add_time = DateTimeHelper::getFormatGMTTimesTimestamp(time());   //  商品入库的时间

            if ($model->save()) {
                Yii::$app->session->setFlash('warning', '商品复制成功，请创建团购活动信息,团拼商品的运费体系需要设置');

                //  梯度价格 商品属性 moq 轮播图 需要复制

                return $this->redirect(['/goods-activity/create', 'goods_id' => $model->goods_id]);
            } else {
                Yii::$app->session->setFlash('error', '商品复制失败，请检查商品信息是否完善');
                return $this->redirect(['view', 'id' => $id]);
            }
        } else {
            return $this->redirect('index');
        }
    }*/

}
