<?php
namespace api\modules\v1\controllers;

use api\helper\ErrorHelper;
use api\modules\v1\models\ApiLoginForm;
use common\helper\DateTimeHelper;
use common\helper\ImageHelper;
use common\helper\TextHelper;
use common\models\UserExtension;
use common\models\Users;
use common\models\WishList;
use common\models\SmsAuthCode;
use common\models\OrderGoods;
use common\models\OrderInfo;
use Yii;
use yii\helpers\VarDumper;
use yii\web\BadRequestHttpException;
use yii\web\ServerErrorHttpException;
use yii\web\UnauthorizedHttpException;
use yii\data\ActiveDataProvider;
use common\helper\NumberHelper;
use common\helper\GoodsHelper;
use yii\web\User;


/**
 * Site controller
 */
class UserController extends BaseActiveController
{
    public $modelClass = 'modules\v1\models\Users';

    public function actions()
    {
        $actions = parent::actions(); // TODO: Change the autogenerated stub
        $actions['captcha'] = [
            'class' => 'yii\captcha\CaptchaAction',
            'height' => 50,
            'width' => 80,
            'minLength' => 4,
            'maxLength' => 4
        ];
        return $actions;
    }

    /**
     * 登录接口
     * @throws UnauthorizedHttpException
     */
    public function actionLogin()
    {
        $username = Yii::$app->request->getAuthUser();
        $password = Yii::$app->request->getAuthPassword();

        Yii::info('username = '. $username. ', password = '. $password, __METHOD__);

        $model = new ApiLoginForm();
        $model->username = $username;
        $model->password = $password;
        if ($model->login()) {
            $user = Yii::$app->user->identity;
            if ($user !== null) {
                $user->updateAccessToken();
            }
            $result = [
                'user_id' => intval($user->user_id),
                'user_name' => $user->user_name,
                'mobile_phone' => $user->mobile_phone,
                'access_token' => $user->access_token,
                'user_rank' => $user->user_rank,
                'is_checked' => intval($user->is_checked),
                'nickname' => $user->nickname,
                'company_name' => $user->company_name,
                'shopfront_pic' => ImageHelper::get_image_path($user->shopfront_pic),
                'biz_license_pic' => ImageHelper::get_image_path($user->biz_license_pic),
                'channel' => $user->channel
            ];

            if (!empty($user->extension)) {
                $result['store_number'] = intval($user->extension['store_number']);
                $result['month_sale_count'] = intval($user->extension['month_sale_count']);
                $result['imports_per'] = intval($user->extension['imports_per']);
                $result['duty'] = intval($user->extension['duty']);
            }

            return $result;
        } else {
            throw new UnauthorizedHttpException('登录验证失败，请检查用户名和密码是否正确');
        }
    }

    /**
     * 注册接口
     * @return array
     * @throws BadRequestHttpException
     * @throws ServerErrorHttpException
     */
    public function actionRegister() {
        //throw new BadRequestHttpException('很抱歉，APP部分功能正在开发完善中，暂不开放，需要注册、下单请关注微信公众号小美诚品', 3);

        $data = Yii::$app->request->post('data');
        if (empty($data)) {
            throw new BadRequestHttpException('缺少资料', 1);
        }

		$mobile_phone = isset($data['mobile']) ? $data['mobile'] : '';
        if (empty($mobile_phone)) {
            throw new BadRequestHttpException('请输入手机号码', 2);
        } elseif(!preg_match('/^1\d{10}$/',$mobile_phone)) {
            throw new BadRequestHttpException('请输入正确的手机号码', 3);
        }
        
        //  优先判断验证码
        if(empty($data['check_no'])) {
            throw new BadRequestHttpException('请填写验证码', 4);
        } elseif (!SmsAuthCode::check($mobile_phone, $data['check_no'])) {
            throw new BadRequestHttpException('验证码不正确', 5);
        }


        $user = new Users();
        $user->user_name = 'XM_'. uniqid();
        $user->mobile_phone = (string)$mobile_phone;
        $password = isset($data['password']) ? $data['password'] : '';
        $user->setPassword($password);
        $user->company_name = '尚未填写';
        $user->province = isset($data['province']) ? $data['province'] : 0;
        $user->city = isset($data['city']) ? $data['city'] : 0;
        $user->reg_time = DateTimeHelper::gmtime();
        $user->last_login = DateTimeHelper::gmtime();
        $user->user_rank = 1;
        $user->is_checked = 0;
        $user->updateAccessToken();

        if (empty($user->company_name)) {
            throw new BadRequestHttpException('请输入店铺名称', 7);
        }

        if ($user->province == 0) {
            throw new BadRequestHttpException('请输入所在省', 8);
        }

        if ($user->city == 0) {
            throw new BadRequestHttpException('请输入所在城市', 9);
        }

//        if(preg_match('/^[a-zA-Z0-9\u4e00-\u9fa5_]{4,20}$/', $user->user_name) || preg_match('/^[1-9]\d*$/', $user->user_name) || preg_match('/\'\/^\\s*$|^c:\\\\con\\\\con$|[%,\\*\\"\\s\\t\\<\\>\\&\'\\\\]/', $user->user_name)) {
//            Yii::error('用户名只能是4-20位数字、英文、汉字或_，并且不能为纯数字', __METHOD__);
//            throw new BadRequestHttpException('用户名只能是4-20位数字、英文、汉字或_，并且不能为纯数字', 1);
//        }

        if ($user->save()) {
            return [
                'user_id' => intval($user->user_id),
                'user_name' => $user->user_name,
                'mobile_phone' => $user->mobile_phone,
                'access_token' => $user->access_token,
                'user_rank' => $user->user_rank,
                'is_checked' => $user->is_checked,
            ];
        }
        else {
            Yii::error('注册失败 user = '. VarDumper::export($user), __METHOD__);
            throw new ServerErrorHttpException(ErrorHelper::getFirstError($user), 5);
        }
    }

    /**
     * 用微信手机端openid验证授权
     * @return array
     * @throws ServerErrorHttpException
     * @throws UnauthorizedHttpException
     */
    public function actionToken() {
        $username = Yii::$app->request->getAuthUser();
        $password = Yii::$app->request->getAuthPassword();

        Yii::info('username = '. $username. ', password = '. $password, __METHOD__);
        $userModel = \api\modules\v1\models\Users::findOne([
            'user_name' => $username,
        ]);

        if (empty($userModel)) {
            Yii::error('用户名未找到', 1);
            throw new UnauthorizedHttpException('用户名未找到', 1);
        }

        Yii::info('user = '. VarDumper::export($userModel), __METHOD__);

        if ($userModel->password == $password) {
            if ($userModel->updateAccessToken()) {
                return [
                    'userId' => $userModel->user_id,
                    'userName' => $userModel->user_name,
                    'accessToken' => $userModel->access_token,
                ];
            }
            else {
                throw new ServerErrorHttpException('刷新token失败', 3);
            }
        }

        Yii::error('用户名和openid不匹配 username = '. $username. ', password = '. $password, __METHOD__);
        throw new UnauthorizedHttpException('用户名和openid不匹配', 2);
    }

    public function actionReset_password() {
        $data = Yii::$app->request->post('data');

        if (empty($data['mobile']) || empty($data['password'])) {
            Yii::error('缺少必要参数 data = '. VarDumper::export($data), __METHOD__);
            throw new BadRequestHttpException('缺少必要参数', 1);
        }

        $mobile = $data['mobile'];
        $newPassword = $data['password'];
        $checkNo = $data['check_no'];

        if (!SmsAuthCode::check($mobile, $checkNo)) {
            Yii::error('验证码错误 mobile = '. $mobile. ', checkNo = '. $checkNo, __METHOD__);
            throw new BadRequestHttpException('手机验证码错误', 4);
        }

        $userModel = Users::findOne([
            'mobile_phone' => $mobile,
        ]);

        if (empty($userModel)) {
            Yii::error('未找到用户 data = '. VarDumper::export($data), __METHOD__);
            throw new ServerErrorHttpException('未找到用户', 2);
        }

        $userModel->setPassword($newPassword);
        $userModel->ec_salt = null;

        if (!$userModel->save()) {
            Yii::error('保存失败 errors = '. VarDumper::export($userModel->errors), __METHOD__);
            throw new ServerErrorHttpException(json_encode($userModel->errors), 3);
        }
        return [
            'message' => '重置密码成功',
        ];
    }

    public function actionView() {
        $data = Yii::$app->request->post('data');

        $userId = $data['userId'];
        if (empty($userId)) {
            throw new BadRequestHttpException('请输入用户ID查询', 1);
        }

        $user = Users::findOne([
            'user_id' => $userId,
        ]);

        if (empty($user)) {
            Yii::error('未找到用户', __METHOD__);
            throw new ServerErrorHttpException('未找到用户', 2);
        }

        return [
            'userId' => $user->user_id,
            'companyName' => $user->company_name,
            'mobilePhone' => $user->mobile_phone,
        ];
    }

    /**
     * 发送验证码
     * @throws BadRequestHttpException
     */
    public function actionSend_check_no() {
        $data = Yii::$app->request->post('data');

        $mobile = $data['mobile'];
        if (empty($mobile)) {
            throw new BadRequestHttpException('请输入手机号码', 1);
        }

        $length = 6;
        $checkNo = ''. rand(pow(10, ($length - 1)), pow(10, $length) - 1);


        if (!SmsAuthCode::uniqueSave($mobile, $checkNo)) {
            throw new ServerErrorHttpException('验证码发送失败', 3);
        }

        $api = new \ChuanglanSMS('N9058011', '2701dfc4');
        return [
            'string' => $api->send($mobile, "【小美诚品】您的验证码是".$checkNo)
        ];
    }

    /**
     * 上传图片接口
     * @return string
     * @throws BadRequestHttpException
     * @throws ServerErrorHttpException
     */
	public function actionUpload_img()
	{
        $token = Yii::$app->request->getAuthUser();
        $userModel = Users::find()->where(['access_token' => $token])->one();
        if (!$userModel) {
            throw new BadRequestHttpException('非法访问', 1);
        }
        //  图片文件
        $rawBody = Yii::$app->request->rawBody;
		if (empty($rawBody)) {
			throw new BadRequestHttpException('缺少必要参数', 2);
		}

		//  存储路径
        $path = Yii::$app->request->get('path');
		if (empty($path)) {
            $path = 'member_apply';
        }

        $imgName = md5(getmypid().'.'.time().'.'.uniqid(mt_rand(), true));
        $fullPath = Yii::getAlias('@imgRoot').'/'.$path.'/'.$imgName.'.jpg';

        if (file_put_contents($fullPath, $rawBody)) {
            return 'data/attached/'.$path.'/'.$imgName.'.jpg';
        } else {
            throw new ServerErrorHttpException('图片上传失败', 3);
        }
	}

    /**
     * 用户提交认证资料
     * 验证用户权限
     * 验证门头照、营业执照 图片文件是否存在
     *
     * @return array
     * @throws BadRequestHttpException
     * @throws ServerErrorHttpException
     */
    public function actionApply()
    {
        $token = Yii::$app->request->getAuthUser();
        $userModel = Users::find()->where(['access_token' => $token])->one();
        if (!$userModel) {
            throw new BadRequestHttpException('请登录', 1);
        }

        if ($userModel->is_checked == Users::IS_CHECKED_STATUS_PASSED) {
            throw new BadRequestHttpException('您已经通过审核，无需重复提交', 1);
        }

        $data = Yii::$app->request->post('data');
        Yii::warning(' $data = '.json_encode($data), __METHOD__);
        if (empty($data)) {
            throw new BadRequestHttpException('缺少参数', 2);
        }

        //  店铺门头
        if (empty($userModel->shopfront_pic) && empty($data['shopfront_pic'])) {
            throw new BadRequestHttpException('缺少 店铺门头照片', 3);
        }
        //  如果有传新的图片地址，要验证图片是否存在，存在才向对象赋值
        elseif (!empty($data['shopfront_pic'])) {
            $filePath = Yii::getAlias('@mRoot/'.$data['shopfront_pic']);
            if (file_exists($filePath)) {
                $userModel->shopfront_pic = trim($data['shopfront_pic']);
            } else {
                Yii::warning('filePath = '. $filePath. ', error = 缺少 店铺门头照片', __METHOD__);
                throw new BadRequestHttpException('缺少 店铺门头照片', 4);
            }
        }

        //  营业执照
        if (empty($userModel->biz_license_pic) && empty($data['biz_license_pic'])) {
            throw new BadRequestHttpException('缺少 营业执照照片', 5);
        }
        //  如果有传新的图片地址，要验证图片是否存在，存在才向对象赋值
        elseif (!empty($data['biz_license_pic'])) {
            $filePath = Yii::getAlias('@mRoot/'. $data['biz_license_pic']);
            if (file_exists($filePath)) {
                $userModel->biz_license_pic = trim($data['biz_license_pic']);
            } else {
                Yii::warning('filePath = '. $filePath. ', error = 缺少 营业执照照片 6', __METHOD__);
                throw new BadRequestHttpException('缺少 营业执照照片', 6);
            }
        }

        //接收数据 并验证
        $userModel->nickname = isset($data['nickname']) ? TextHelper::hackFilter($data['nickname']) : '';
        $userModel->company_name = isset($data['company_name']) ? TextHelper::hackFilter($data['company_name']) : '';
        $userModel->channel = isset($data['channel']) ? ''. $data['channel'] : '0';

        $userExtension = UserExtension::find()->where(['user_id' => $userModel->user_id])->one();
        if (empty($userExtension)) {
            $userExtension = new UserExtension();
            $userExtension->user_id = $userModel->user_id;
        }
        $userExtension->imports_per = isset($data['imports_per']) ? $data['imports_per'] : 0;
        $userExtension->duty = isset($data['duty']) ? $data['duty'] : 0;
        $userExtension->store_number = isset($data['store_number']) ? $data['store_number'] : 0;
        $userExtension->month_sale_count = isset($data['month_sale_count']) ? $data['month_sale_count'] : 0;

        if ($userModel->save()) {
            if ($userExtension->save()) {
                return [
                    'success' => '上传成功'
                ];
            } else {
                Yii::warning('认证信息提交失败 $userExtension->errors = '.VarDumper::export($userExtension->errors), __METHOD__);
                throw new ServerErrorHttpException('认证信息提交失败', 7);
            }
        } else {
            Yii::warning('认证信息提交失败 $userModel->errors = '. VarDumper::dumpAsString($userModel->errors), __METHOD__);
            throw new ServerErrorHttpException('认证信息提交失败', 8);
        }
    }

    /**
     * 编辑个人信息
     * @return array|Users|null
     * @throws BadRequestHttpException
     */
    public function actionEdit_profile()
    {
        $token = Yii::$app->request->getAuthUser();
        $userModel = Users::find()->where(['access_token' => $token])->one();
        if (!$userModel) {
            throw new BadRequestHttpException('请登录', 1);
        }
        if (Yii::$app->request->isPost){
            $other['qq'] = $qq = Yii::$app->request->post('qq');
            $other['office_phone'] = $office_phone = Yii::$app->request->post('office_phone');
            $other['email'] = $email = Yii::$app->request->post('email');
            $other['company_name'] = $company_name = Yii::$app->request->post('company_name');
            if(empty($company_name)) {
                throw new BadRequestHttpException('店铺名称不允许为空', 1);
            }
            /* 过滤非法的键值 */
            $other_key_array = array('qq', 'office_phone', 'email', 'company_name');
            foreach ($other as $key => $val) {
                //删除非法key值
                if (!in_array($key, $other_key_array)) {
                    unset($other[$key]);
                } else {
                    $other[$key] = htmlspecialchars(trim($val)); //防止用户输入javascript代码
                }
            }

            $users = Users::findOne(['user_id'=> $userModel->user_id]);
            $users->qq = $other['qq'];
            $users->office_phone = $other['office_phone'];
            $users->email = $other['email'];
            $users->company_name = $other['company_name'];
            if($users->save()){
                return [
                    'msg' => '您的个人资料已经成功修改！'
                ];
            }
        }
        //用户资料
        $query = Users::find();
        $info = $query->select(['user_id','user_name', 'home_phone', 'company_name', 'office_phone', 'qq'])
        ->from($userModel::tableName())
        ->where(['user_id' => $userModel->user_id])
        ->one();

        return $info;
    }

    /**
     * 采购心愿
     * @return array
     * @throws BadRequestHttpException
     */
    public function actionPurchasing_desire(){
        $token = Yii::$app->request->getAuthUser();
        $userModel = Users::find()->where(['access_token' => $token])->one();
        if (!$userModel) {
            throw new BadRequestHttpException('请登录', 1);
        }
        if(empty(Yii::$app->request->post('content'))){
            throw new BadRequestHttpException('请输入采购内容', 1);
        }
        $wish_list = new WishList();
        $wish_list->user_id = $userModel->user_id;
        $wish_list->state = 1;
        $wish_list->created_at = date('Y-m-d H:i:s');;
        $wish_list->content = Yii::$app->request->post('content');
        if($wish_list->save()){
            return [
                'msg' => '您的采购心愿已提交成功，我们努力为您实现，有合适货源，我们会第一时间通知您。'
            ];
        }else{
            return[
                'msg' => '您的心愿单已提交失败，请重新提交'
            ];
        }
    }

    /**
     * 再次购买
     * @return array
     * @throws BadRequestHttpException
     */
    public function actionAssign_bought_goods(){
        $page = Yii::$app->request->get('page') ?: 0;
        $size = Yii::$app->request->get('size') ?: 10;
        $token = Yii::$app->request->getAuthUser();
        $userModel = Users::find()->where(['access_token' => $token])->one();
        if (!$userModel) {
            throw new BadRequestHttpException('请登录', 1);
        }
        $userId = $userModel->user_id;
        $query = OrderGoods::find()->joinWith([
            'goods goods',
            'orderInfo orderInfo',
        ])->where([
            'orderInfo.user_id' => $userId,
        ])->andWhere([
            'orderInfo.pay_status' => OrderInfo::PAY_STATUS_PAYED,
        ])->andWhere([
            'or',
            [
                'orderInfo.extension_code' => OrderInfo::EXTENSION_CODE_GENERAL
            ],
            [
                'orderInfo.extension_code' => OrderInfo::EXTENSION_CODE_GENERAL_BUY_NOW,
            ],
        ])->andWhere([
            '>',
            OrderGoods::tableName().'.goods_id',
            0,
        ])->orderBy([
            'rec_id' => SORT_DESC,
        ])->groupBy('goods_id');
        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => $size,
                'page' => $page ?: 0,
            ]
        ]);

        $orderGoodsList = $dataProvider->getModels();

        $goodsList = [];
        foreach ($orderGoodsList as $orderGoods) {
            $goods = $orderGoods['goods'];

            $user_discount = ($goods['discount_disable'] == 1) ? 1 : $_SESSION['discount'];
            $price = NumberHelper::price_format($user_discount * $goods['min_price']);
            $discount = NumberHelper::discount_format(10.0 * $price / $goods['market_price']);

            $goodsItem = [
                'goods_id' => $goods['goods_id'],
                'goods_name' => $goods['goods_name'],
                'goods_thumb' => ImageHelper::get_image_path($goods['goods_thumb']),
                'goods_number' => $goods['goods_number'],
                'start_num' => $goods['start_num'],
                'min_price' => $price,
                'discount' => $discount,
                'buy_data' => GoodsHelper::getBuyData($goods),
                'tags' => GoodsHelper::WxTags($goods['tags']),
            ];

            $goodsList[] = $goodsItem;
        }
        return [
            'goodsList' => $goodsList
        ];
    }

    public function actionUpgrade_apply(){

    }
}
