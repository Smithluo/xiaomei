<?php
/**
 * Created by PhpStorm.
 * User: root
 * Date: 16-9-29
 * Time: 下午6:56
 */
namespace backend\models;

use common\helper\DateTimeHelper;
use common\helper\NumberHelper;
use common\helper\OrderGroupHelper;
use common\models\Goods;
use common\models\OrderGoods;
use backend\models\OrderGroup;
use common\models\OrderInfo;
use common\models\PayLog;
use common\models\Users;
use Yii;
use yii\base\Model;
use yii\helpers\VarDumper;
use yii\web\BadRequestHttpException;
use yii\web\ServerErrorHttpException;
use yii\base\Exception;

class OrderGroupImportForm extends Model
{
    public $file;

    public function attributeLabels()
    {
        return [
            'file' => '商品数据导入（excel文件）'
        ]; // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return [
            [['file'], 'file', 'skipOnEmpty' => false],
        ];
    }

    public function import() {
        if($this->validate()) {
            if ($this->file->extension != 'xlsx' && $this->file->extension != 'xls') {
                return false;
            }
            $time = date('Ymd-His');
            $filePath = 'uploads/' . $time . $this->file->baseName . '.' . $this->file->extension;
            $this->file->saveAs('uploads/' . $time . $this->file->baseName . '.' . $this->file->extension);
            $data = \moonland\phpexcel\Excel::import($filePath);

            if(!empty($data)) {
                $wrong_message = '';

                $groupDataList = [];
                foreach ($data as $importItem) {
                    $mobilePhone = $importItem['mobile_phone'] ?: '';

                    if (!empty($mobilePhone)) {
                        $groupDataList[] = $importItem;
                    }

                    $goodsId = $importItem['goods_id'] ?: 0;
                    if ($goodsId == 0) {
                        throw new BadRequestHttpException('缺少商品ID，请检查是否有某行的goods_id缺失');
                    }

                    $goodsNumber = $importItem['goods_number'] ?: 0;
                    if ($goodsNumber == 0) {
                        throw new BadRequestHttpException('缺少商品数量，请检查是否有某行的goods_number缺失');
                    }

                    $goodsSn = $importItem['goods_sn'] ?: 0;
                    if ($goodsSn == 0) {
                        throw new BadRequestHttpException('缺少商品条码，请检查是否有某行的goods_sn缺失');
                    }

                    $goodsModel = Goods::find()->where([
                        'goods_id' => $goodsId,
                    ])->andWhere([
                        'goods_sn' => $goodsSn,
                    ])->one();

                    if (empty($goodsModel)) {
                        throw new BadRequestHttpException('未能找到商品，goods_id = '. $goodsId. ', goods_sn = '. $goodsSn);
                    }

                    $goodsPrice = $importItem['goods_price'] ?: 0;
                    $limitPrice = NumberHelper::price_format($goodsModel['min_price'] * 0.9);
                    if ($goodsPrice < $limitPrice) {
                        throw new BadRequestHttpException('商品单价过低，请核实商品单价，商品ID：'. $goodsId. ', 商品名：'. $goodsModel['goods_name']. '，商品单价：'. $goodsPrice. '，限制最低单价：'. $limitPrice);
                    }

                    if (!empty($groupDataList)) {
                        if ($goodsModel['supplier_user_id'] != 0) {
                            if (empty($groupDataList[count($groupDataList) - 1]['goodsListBySupplier'][$goodsModel['supplier_user_id']])) {
                                $groupDataList[count($groupDataList) - 1]['goodsListBySupplier'][$goodsModel['supplier_user_id']] = [];
                            }
                            $groupDataList[count($groupDataList) - 1]['goodsListBySupplier'][$goodsModel['supplier_user_id']][] = [
                                'goodsModel' => $goodsModel,
                                'goodsNumber' => $goodsNumber,
                                'goodsPrice' => $goodsPrice,
                                'useStorage' => $importItem['use_storage'],
                            ];
                        }
                        else {
                            if (empty($groupDataList[count($groupDataList) - 1]['goodsListByBrand'][$goodsModel['brand_id']])) {
                                $groupDataList[count($groupDataList) - 1]['goodsListByBrand'][$goodsModel['brand_id']] = [];
                            }
                            $groupDataList[count($groupDataList) - 1]['goodsListByBrand'][$goodsModel['brand_id']][] = [
                                'goodsModel' => $goodsModel,
                                'goodsNumber' => $goodsNumber,
                                'goodsPrice' => $goodsPrice,
                                'useStorage' => $importItem['use_storage'],
                            ];
                        }
                    }
                }

                $transaction = OrderGroup::getDb()->beginTransaction();
                try {
                    foreach ($groupDataList as $dataItem) {
                        $mobilePhone = $dataItem['mobile_phone'];

                        $orderGroup = new OrderGroup();

                        $user = Users::find()->where([
                            'mobile_phone' => $mobilePhone,
                        ])->one();

                        if (empty($user)) {
                            $msg = '手机号码:' . $mobilePhone . ' 无对应用户';
                            throw new BadRequestHttpException($msg);
                        }

                        $orderGroup->user_id = $user->user_id;

                        $date = date('Ymd');

                        $createTime = $dataItem['create_time'] ?: '';
                        if (!empty($createTime)) {
                            $orderGroup->create_time = DateTimeHelper::getFormatGMTTimesTimestamp($createTime);
                            $date = date('Ymd', $orderGroup['create_time']);
                        }
                        else {
                            $orderGroup->create_time = DateTimeHelper::gmtime();
                        }

                        $orderGroup->group_id = OrderGroupHelper::getUniqidGroupId($user->user_id, $date);

                        $orderGroup->group_status = OrderGroup::ORDER_GROUP_STATUS_UNPAY;
                        $orderGroup->consignee = $dataItem['consignee'];
                        $orderGroup->country = 1;
                        if (!empty($dataItem['province'])) {
                            $orderGroup->province = $dataItem['province'];
                        }
                        if (!empty($dataItem['city'])) {
                            $orderGroup->city = $dataItem['city'];
                        }
                        if (!empty($dataItem['district'])) {
                            $orderGroup->district = $dataItem['district'];
                        }
                        $orderGroup->address = $dataItem['address'];
                        $orderGroup->mobile = ''.$dataItem['mobile'];
                        $orderGroup->pay_id = 0;
                        $orderGroup->pay_name = '未知';
                        $orderGroup->offline = $dataItem['offline'];

                        //发包邮还是到付
                        $freeShip = $dataItem['free_ship'];
                        if (!isset($freeShip)) {
                            throw new BadRequestHttpException('缺少是否包邮 mobile_phone = '. $mobilePhone);
                        }

                        if (!$orderGroup->save()) {
                            throw new Exception('总单保存失败', 1);
                        }

                        //供应商分单
                        if (!empty($dataItem['goodsListBySupplier'])) {
                            $goodsListBySupplier = $dataItem['goodsListBySupplier'];

                            foreach ($goodsListBySupplier as $supplierUserId => $goodsList) {
                                $orderInfo = OrderInfo::createFromOrderGroup($orderGroup, $date);
                                $orderInfo->supplier_user_id = $supplierUserId;
                                if ($freeShip == 1) {
                                    $orderInfo->shipping_id = 6;
                                    $orderInfo->shipping_name = '全国包邮';
                                }
                                else {
                                    $orderInfo->shipping_id = 3;
                                    $orderInfo->shipping_name = '运费到付';
                                }
                                $orderGroup->link('orderList', $orderInfo);
                                if ($orderInfo->hasErrors()) {
                                    throw new Exception('子单link失败', 2);
                                }
                                foreach ($goodsList as $item) {
                                    $goodsModel = $item['goodsModel'];
                                    $orderGoods = OrderGoods::createFromGoods($goodsModel);
                                    $orderGoods->goods_number = $item['goodsNumber'];

                                    if (!empty($item['useStorage'])) {
                                        if ($goodsModel['goods_number'] - $orderGoods['goods_number'] < 0) {
                                            throw new BadRequestHttpException('商品：'. $goodsModel['goods_name']. '('. $goodsModel['goods_sn']. ') 库存不足， 下单需要库存：'. $item['goodsNumber']. '， 实际库存：'. $goodsModel['goods_number']);
                                        }
                                        $goodsModel['goods_number'] -= $orderGoods['goods_number'];
                                        if (!$goodsModel->save()) {
                                            throw new ServerErrorHttpException('商品扣库存失败，商品名：'. $goodsModel['goods_name']. ', 条码：'. $goodsModel['goods_sn']);
                                        }
                                    }

                                    $orderGoods->goods_price = $item['goodsPrice'];
                                    $orderGoods->pay_price = $item['goodsPrice'];
                                    $orderInfo->link('ordergoods', $orderGoods);
                                    if ($orderGoods->hasErrors()) {
                                        throw new Exception('订单商品保存失败', 3);
                                    }
                                }

                                $orderInfo->recalcGoodsAmount();
                                if (!$orderInfo->save()) {
                                    throw new Exception('子单保存失败', 4);
                                }
                            }

                            $orderGroup->syncFeeInfo();
                            $orderGroup->syncTimeInfo();

                            if (!$orderGroup->save()) {
                                throw new Exception('总单保存失败', 5);
                            }
                        }

                        //品牌分单
                        if (!empty($dataItem['goodsListByBrand'])) {
                            $goodsListByBrand = $dataItem['goodsListByBrand'] ?: [];
                            foreach ($goodsListByBrand as $brandId => $goodsList) {
                                $orderInfo = OrderInfo::createFromOrderGroup($orderGroup, $date);
                                $orderInfo->brand_id = $brandId;
                                $orderGroup->link('orderList', $orderInfo);
                                if ($orderInfo->hasErrors()) {
                                    throw new Exception('子单link失败', 6);
                                }

                                foreach ($goodsList as $item) {
                                    $goodsModel = $item['goodsModel'];
                                    $orderGoods = OrderGoods::createFromGoods($goodsModel);
                                    $orderGoods->goods_number = $item['goodsNumber'];

                                    if (!empty($item['useStorage'])) {
                                        if ($goodsModel['goods_number'] - $orderGoods['goods_number'] < 0) {
                                            throw new BadRequestHttpException('商品：'. $goodsModel['goods_name']. '('. $goodsModel['goods_sn']. ') 库存不足， 下单需要库存：'. $item['goodsNumber']. '， 实际库存：'. $goodsModel['goods_number']);
                                        }
                                        $goodsModel['goods_number'] -= $orderGoods['goods_number'];
                                        if (!$goodsModel->save()) {
                                            throw new ServerErrorHttpException('商品扣库存失败，商品名：'. $goodsModel['goods_name']. ', 条码：'. $goodsModel['goods_sn']);
                                        }
                                    }

                                    $orderGoods->goods_price = $item['goodsPrice'];
                                    $orderGoods->pay_price = $item['goodsPrice'];
                                    $orderInfo->link('ordergoods', $orderGoods);
                                    if ($orderGoods->hasErrors()) {
                                        throw new Exception('订单商品保存失败', 7);
                                    }
                                }

                                $orderInfo->recalcGoodsAmount();
                                if (!$orderInfo->save()) {
                                    throw new Exception('订单保存失败', 8);
                                } else {
                                    //  支付记录入库
                                    $payLog = new PayLog();
                                    $payLog->order_id = $orderInfo->order_id;
                                    $payLog->order_amount = $orderInfo->order_amount;
                                    $payLog->order_type = 0;
                                    $payLog->is_paid = 0;

                                    Yii::warning(' 支付记录入库 $payLog = '.VarDumper::dumpAsString($payLog), __METHOD__);
                                    if (!$payLog->save()) {
                                        Yii::warning(__LINE__ .
                                            ' pay_log 支付记录入库失败 $payLog = ' . VarDumper::dumpAsString($payLog) .
                                            '; $payLog->errors = ' . json_encode($orderInfo->errors));
                                        throw new ServerErrorHttpException('支付记录入库失败', 10);
                                    }
                                }
                            }

                            $orderGroup->syncFeeInfo();
                            $orderGroup->syncTimeInfo();

                            if (!$orderGroup->save()) {
                                throw new Exception('总单保存失败', 9);
                            }
                        }
                    }
                    $transaction->commit();
                } catch (\Exception $e) {
                    if (!empty($wrong_message)) {
                        Yii::$app->session->setFlash('fail', $wrong_message);
                    }
                    Yii::error('创建订单失败 e = '. VarDumper::export($e), __METHOD__);
                    $transaction->rollBack();
                    unlink($filePath);
                    throw $e;
                } catch (\Throwable $e) {
                    if (!empty($wrong_message)) {
                        Yii::$app->session->setFlash('fail', $wrong_message);
                    }
                    Yii::error('创建订单失败 e = '. VarDumper::export($e), __METHOD__);
                    $transaction->rollBack();
                    unlink($filePath);
                    throw $e;
                }

                if ($wrong_message) {
                    throw new ServerErrorHttpException($wrong_message);
                }
            }
            else {
                unlink($filePath);
                return false;
            }
            unlink($filePath);
            return true;
        }
        return false;
    }

}