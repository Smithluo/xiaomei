<?php

namespace backend\controllers;

use backend\models\BrandDiscountUploadForm;
use kartik\grid\EditableColumnAction;
use Yii;
use backend\models\Brand;
use backend\models\BrandSearch;
use yii\helpers\ArrayHelper;
use yii\helpers\VarDumper;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\UploadedFile;

/**
 * OperationBrandController implements the CRUD actions for Brand model.
 */
class OperationBrandController extends Controller
{
    public function actions()
    {
        $actionValue = [
            'class' => EditableColumnAction::className(),
            'modelClass' => Brand::className(),
            'outputValue' => function($model, $attribute, $key, $index) {
                return ''.$model->$attribute;
            },
            'outputMessage' => function($model, $attribute, $key, $index) {
                if ($model->hasErrors()) {
                    $errors = $model->getFirstError($attribute);
                    return $errors;
                }
                return '';
            },
            'showModelErrors' => true,
            'errorOptions' => ['header' => '222'],
        ];
        return ArrayHelper::merge(
            parent::actions(),
            [
                'edit-desc' => $actionValue,
                'edit-short-desc' => $actionValue,
                'edit-sort' => $actionValue,
                'edit-tag' => $actionValue,
            ]
        ); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all Brand models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new BrandSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        $discountImportModel = new BrandDiscountUploadForm();
        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'discountImportModel' => $discountImportModel,
        ]);
    }

    /**
     * Finds the Brand model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Brand the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Brand::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    /**
     * 导出商品信息列表
     * @return bool
     */
    public function actionExport()
    {

        $brandList = Brand::find()->select([
            'brand_id',
            'brand_name',
            'sort_order',
            'brand_tag',
        ])->where(['is_show' => 1])->orderBy(['brand_id' => SORT_ASC])->all();

        $time = \common\helper\DateTimeHelper::getFormatDateTimeNow();

        \moonland\phpexcel\Excel::export([
            'format' => 'Excel2007',
            'fileName' => '品牌列表_'. $time,
            'models' => $brandList,
            'columns' => [
                'brand_id',
                'brand_name',
                'sort_order',
                'brand_tag',
            ], //without header working, because the header will be get label from attribute label.
            'headers' => [
                'brand_id' => 'brand_id(品牌ID)',
                'brand_name' => 'brand_name(品牌名)',
                'sort_order' => 'sort_order(品牌排序值)',
                'brand_tag' => 'brand_tag(品牌在首页热门商品出现的序列号，填数字，如果有多个按逗号分开)',
            ],
        ]);
    }

    public function actionImportDiscount() {

        $discountImportModel = new BrandDiscountUploadForm();

        if (Yii::$app->request->isPost) {
            $discountImportModel->file = UploadedFile::getInstance($discountImportModel, 'file');
            if ($discountImportModel->import()) {
                // 文件上传成功
                $this->redirect(['index']);
                return;
            }
        }

        return '导入失败';
    }
}
