<?php

namespace common\models;

use common\helper\ImageHelper;
use common\helper\NumberHelper;
use common\helper\TextHelper;
use Yii;
use yii\helpers\ArrayHelper;
use common\behaviors\UploadImageBehavior;

/**
 * This is the model class for table "o_gift_pkg".
 *
 * @property integer $id
 * @property string $name
 * @property string $img
 * @property string $thumb_img
 * @property string $original_img
 * @property string $price
 * @property integer $shipping_code
 * @property string $brief
 * @property integer $is_on_sale
 * @property string $updated_at
 * @property integer $updated_by
 * @property string $pkg_desc
 * @property integer $sort_order
 * @property string $desc
 */
class GiftPkg extends \yii\db\ActiveRecord
{
    const IS_ON_SALE    = 1;
    const NOT_ON_SALE   = 0;

    public static $isOnSaleMap = [
        self::IS_ON_SALE    => '上架',
        self::NOT_ON_SALE   => '下架',
    ];
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'o_gift_pkg';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'price', 'shipping_code'], 'required'],
            [['price'], 'number'],
            [['is_on_sale', 'updated_by', 'sort_order'], 'integer'],
            [['updated_at'], 'safe'],
            [['pkg_desc'], 'string'],
            [['name'], 'string', 'max' => 40],
            [['desc'], 'string', 'max' => 50],
            [['shipping_code'], 'string', 'max' => 20],
            [['img', 'thumb_img', 'brief'], 'string', 'max' => 255],

            ['is_on_sale', 'default', 'value' => false],
            ['updated_at', 'default', 'value' => date('Y-m-d H:i:s')],
            ['updated_by', 'default', 'value' => 0],

            [
                ['original_img'],   //  , 'goods_img', 'goods_thumb'
                'image',
                'extensions' => 'jpg, jpeg, gif, png',
                'maxSize' => 2 * 1024 * 1024,
                'on' => ['insert', 'update']
            ],
            ['original_img', 'required', 'on' => 'insert'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => '礼包活动ID',
            'name' => '礼包活动名称',
            'img' => '主显示图',
            'original_img' => '原图',
            'thumb_img' => '缩略图',
            'price' => '活动价',
            'shipping_code' => '配送政策',
            'brief' => '卖点(逗号分隔)',
            'is_on_sale' => '是否上架',
            'updated_at' => '更新时间',
            'updated_by' => '最后操作人',
            'pkg_desc' => '礼包活动详情',
            'sort_order' => '排序值',
            'desc' => '显示在首页活动区的短描述',
        ];
    }


    public function behaviors()
    {
        return ArrayHelper::merge(parent::behaviors(), [
            //  图片上传
            [
                'class' => UploadImageBehavior::className(),
                'attribute' => 'original_img',
                'scenarios' => ['insert', 'update'],
                'path' => '@mRoot/data/attached/gift-pkg/{id}/',
                'storePrefix' => 'data/attached/gift-pkg/{id}/',
                'url' => Yii::$app->params['shop_config']['img_base_url'].'/gift-pkg/{id}',
                'thumbPath' => '@mRoot/data/attached/gift-pkg/{id}/',
                //  thumb、preview 会出现在o_goods.goods_img、o_goods.goods_thumb字段中，不要改
                'thumbs' => [
                    'preview' => ['width' => 620, 'height' => 620, 'quality' => 100],
                    'thumb' => ['width' => 295, 'height' => 295, 'quality' => 100],
                ],
            ],
        ]); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        if (parent::beforeSave($insert)) {
            //  商品显示图和缩略图 路径修正
            if (!empty($this->original_img)) {
                $pathParts = pathinfo($this->original_img);
                $dirname = $pathParts['dirname'];
                $basename = $pathParts['basename'];

                $this->original_img = $basename;
                $this->img = 'preview-'.$basename;
                $this->thumb_img = 'thumb-'.$basename;

                $this->updated_at = date('Y-m-d H:i:s');
                $this->updated_by = Yii::$app->user->identity->getId();
            }
            return true;
        } else {
            return false;
        }
        // TODO: Change the autogenerated stub
    }

    /**
     * 新创建的商品 首图中的id 没有被替换掉
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);

        //  处理商品首图
        if (!empty($this->original_img) && stripos($this->original_img, '{id}') !== false) {
            $this->original_img = str_replace('{id}', $this->id, $this->original_img);
            $this->img = str_replace('{id}', $this->id, $this->goods_img);
            $this->thumb_img = str_replace('{id}', $this->id, $this->goods_thumb);

            $this->save();
        }

        // TODO: Change the autogenerated stub
    }

    public function getGiftPkgGoods()
    {
        return $this->hasMany(GiftPkgGoods::className(), ['gift_pkg_id' => 'id']);
    }

    /**
     * 获取 礼包详情
     * @param $id
     * @return array
     */
    public static function giftPkgInfo($id)
    {
        $giftPkgModel = self::find()
            ->joinWith([
                'giftPkgGoods',
                'giftPkgGoods.goods'
            ])->where([
                GiftPkg::tableName().'.id' => $id,
                GiftPkg::tableName().'.is_on_sale' => self::IS_ON_SALE,
            ])->one();

        $giftPkg = [];
        $giftGoodsList = [];
        $max_num = [];
        if (!empty($giftPkgModel->giftPkgGoods)) {
            $giftPkg['img'] = $giftPkgModel->getUploadUrl('img');
            $giftPkg['thumb_img'] = $giftPkgModel->getUploadUrl('thumb_img');
            $giftPkg['name'] = $giftPkgModel->name;
            $giftPkg['id'] = $giftPkgModel->id;
            $giftPkg['is_on_sale'] = $giftPkgModel->is_on_sale;
            $giftPkg['shippingCode'] = $giftPkgModel->shipping_code;
            $brief = TextHelper::replaceDelimter($giftPkgModel->brief);
            $giftPkg['brief'] = str_replace(',', ' ', $brief);
            $giftPkg['pkg_desc'] = TextHelper::formatRichText($giftPkgModel->pkg_desc);
            $giftPkg['price'] = NumberHelper::price_format($giftPkgModel->price);

            $totalMarketPrice = 0;
            $totalShopPrice = 0;
            foreach ($giftPkgModel->giftPkgGoods as $giftPkgGoods) {
                if ($giftPkgGoods->goods_num > 0) {
                    $max_num[] = floor($giftPkgGoods->goods->goods_number / $giftPkgGoods->goods_num);

                    $totalMarketPrice += $giftPkgGoods->goods->market_price * $giftPkgGoods->goods_num;
                    $totalShopPrice += $giftPkgGoods->goods->shop_price * $giftPkgGoods->goods_num;

                    $giftGoodsList[] = [
                        'goods_thumb'   => ImageHelper::get_image_path($giftPkgGoods->goods->goods_thumb),
                        'goods_name'    => $giftPkgGoods->goods->goods_name,
                        'market_price'  => $giftPkgGoods->goods->market_price,
                        'shop_price'    => $giftPkgGoods->goods->shop_price,
                        'goods_num'     => $giftPkgGoods->goods_num,
                        'goods_id'      => $giftPkgGoods->goods_id,
                    ];
                }
            }
            $userRankSavePrice = $totalShopPrice - $giftPkgModel->price;
            $giftPkg['userRankSavePrice'] = NumberHelper::price_format($userRankSavePrice);

            $giftPkg['maxNum'] = min($max_num); //  礼包的套数 取所有商品匹配的最小值
            if ($giftPkg['maxNum'] == 0) {
                $minNum = 0;
            } else {
                $minNum = 1;
            }
            $giftPkg['minNum'] = $minNum;

            if ($totalMarketPrice > $giftPkg['price']) {
                $giftPkg['discount'] = round($giftPkg['price'] / $totalMarketPrice * 10, 1);
            } else {
                $giftPkg['discount'] = 10.0;
            }
        }

        return [
            'giftPkgModel' => $giftPkgModel,
            'giftGoodsList' => $giftGoodsList,
            'giftPkg' => $giftPkg,
        ];
    }

    public function getTotalShopPrice() {
        $totalShopPrice = 0;
        foreach ($this->giftPkgGoods as $giftPkgGoods) {
            if ($giftPkgGoods->goods_num > 0) {
                $totalShopPrice += $giftPkgGoods->goods->shop_price * $giftPkgGoods->goods_num;
            }
        }
        return $totalShopPrice;
    }
}
