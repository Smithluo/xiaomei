<?php

namespace backend\models;

use common\helper\DateTimeHelper;
use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use backend\models\OrderGroup;
use yii\helpers\ArrayHelper;

/**
 * OrderGroupSearch represents the model behind the search form about `backend\models\OrderGroup`.
 */
class OrderGroupSearch extends OrderGroup
{
    public $add_time_start;
    public $add_time_end;
    public $user_province;
    public $order_sn;
    public $payNote;

    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(), [
            'user_province' => '用户注册时填写的省',
            'order_sn' => '子单号',
            'payNote' => '支付日志',
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id', 'user_id', 'create_time', 'group_status', 'country', 'province', 'city', 'district', 'pay_id', 'pay_time', 'shipping_time', 'recv_time'], 'integer'],
            [['group_id', 'consignee', 'address', 'mobile', 'pay_name', 'user_province', 'add_time_start', 'add_time_end', 'order_sn', 'payNote'], 'safe'],
            [['goods_amount', 'shipping_fee', 'money_paid', 'order_amount', 'discount'], 'number'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = OrderGroup::find()->joinWith([
            'users users',
            'provinceRegion provinceRegion',
            'orders orders',
            'orders.orderAction orderAction',
        ]);

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort' => [
                'defaultOrder' => [
                    'id' => SORT_DESC,
                ]
            ],
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            OrderGroup::tableName().'.user_id' => $this->user_id,
            'create_time' => $this->create_time,
            'group_status' => $this->group_status,
            'country' => $this->country,
            OrderGroup::tableName().'.province' => $this->province,
            OrderGroup::tableName().'.city' => $this->city,
            'district' => $this->district,
            'pay_id' => $this->pay_id,
            'goods_amount' => $this->goods_amount,
            'shipping_fee' => $this->shipping_fee,
            'money_paid' => $this->money_paid,
            'order_amount' => $this->order_amount,
            'pay_time' => $this->pay_time,
            'shipping_time' => $this->shipping_time,
            'recv_time' => $this->recv_time,
            'discount' => $this->discount,
            'users.province' => $this->user_province,
        ]);

        $userRegionList = Yii::$app->user->identity['userRegion'];
        if (!empty($userRegionList)) {
            $regionIds = [];
            foreach ($userRegionList as $userRegion) {
                $regionIds[] = $userRegion['region_id'];
            }

            $query->andFilterWhere([
                'or',
                [
                    'users.province' => $regionIds
                ],
                [
                    'users.city' => $regionIds
                ],
            ]);
        }

        $query->andFilterWhere(['like', OrderGroup::tableName().'.group_id', $this->group_id])
            ->andFilterWhere(['like', OrderGroup::tableName().'.consignee', $this->consignee])
            ->andFilterWhere(['like', OrderGroup::tableName().'.address', $this->address])
            ->andFilterWhere(['like', OrderGroup::tableName().'.mobile', $this->mobile])
            ->andFilterWhere(['like', OrderGroup::tableName().'.pay_name', $this->pay_name])
            ->andFilterWhere(['like', 'orders.order_sn', $this->order_sn])
            ->andFilterWhere(['like', 'orderAction.action_note', $this->payNote]);

        $add_time_start = 0;
        if (!empty($this->add_time_start)) {
            $add_time_start = DateTimeHelper::getFormatGMTTimesTimestamp($this->add_time_start);
        }

        $add_time_end = DateTimeHelper::getFormatCNTimesTimestamp();
        if (!empty($this->add_time_end)) {
            $add_time_end = DateTimeHelper::getFormatGMTTimesTimestamp($this->add_time_end) + 86399;
        }

        $query->andFilterWhere(['between', 'create_time', $add_time_start, $add_time_end]);
        $query->groupBy('id');

        return $dataProvider;
    }

    public function export($params) {
        $query = OrderGroup::find()->joinWith([
            'users users',
            'users.servicerUser servicerUser',
            'users.servicerUser.supserServicerUser supserServicerUser',
            'orders orders',
            'orders.ordergoods ordergoods',
            'provinceRegion provinceRegion',
            'cityRegion cityRegion',
            'districtRegion districtRegion',
            'servicerDivideRecord servicerDivideRecord',
            'servicerDivideRecord.cashRecord cashRecord',
            'deliveryOrders deliveryOrders',
            'event event',
        ]);

        $this->load($params);

        // grid filtering conditions
        $query->andFilterWhere([
            OrderGroup::tableName().'.id' => $this->id,
            OrderGroup::tableName().'.user_id' => $this->user_id,
            OrderGroup::tableName().'.create_time' => $this->create_time,
            OrderGroup::tableName().'.group_status' => $this->group_status,
            OrderGroup::tableName().'.country' => $this->country,
            OrderGroup::tableName().'.province' => $this->province,
            OrderGroup::tableName().'.city' => $this->city,
            OrderGroup::tableName().'.district' => $this->district,
            OrderGroup::tableName().'.pay_id' => $this->pay_id,
            OrderGroup::tableName().'.goods_amount' => $this->goods_amount,
            OrderGroup::tableName().'.shipping_fee' => $this->shipping_fee,
            OrderGroup::tableName().'.money_paid' => $this->money_paid,
            OrderGroup::tableName().'.order_amount' => $this->order_amount,
            OrderGroup::tableName().'.pay_time' => $this->pay_time,
            OrderGroup::tableName().'.shipping_time' => $this->shipping_time,
            OrderGroup::tableName().'.recv_time' => $this->recv_time,
            OrderGroup::tableName().'.discount' => $this->discount,
            'users.province' => $this->user_province,
        ]);

        $userRegionList = Yii::$app->user->identity['userRegion'];
        if (!empty($userRegionList)) {
            $regionIds = [];
            foreach ($userRegionList as $userRegion) {
                $regionIds[] = $userRegion['region_id'];
            }

            $query->andFilterWhere([
                'or',
                [
                    'users.province' => $regionIds
                ],
                [
                    'users.city' => $regionIds
                ],
            ]);
        }

        $query->andFilterWhere(['like', 'group_id', $this->group_id])
            ->andFilterWhere(['like', 'consignee', $this->consignee])
            ->andFilterWhere(['like', 'address', $this->address])
            ->andFilterWhere(['like', 'mobile', $this->mobile])
            ->andFilterWhere(['like', 'pay_name', $this->pay_name]);

        $add_time_start = 0;
        if (!empty($this->add_time_start)) {
            $add_time_start = DateTimeHelper::getFormatGMTTimesTimestamp($this->add_time_start);
        }

        $add_time_end = DateTimeHelper::getFormatCNTimesTimestamp();
        if (!empty($this->add_time_end)) {
            $add_time_end = DateTimeHelper::getFormatGMTTimesTimestamp($this->add_time_end) + 86399;
        }

        $query->andFilterWhere(['between', 'create_time', $add_time_start, $add_time_end]);

        $orderGroupList = $query->all();

        \moonland\phpexcel\Excel::export([
            'format' => 'Excel5',
            'fileName' => '总单导出('. date('YmdHis'). ')',
            'models' => $orderGroupList,
            'columns' => [
                'group_id',
                [
                    'attribute' => 'user_id',
                    'value' => function ($model) {
                        if (empty($model->users)) {
                            return '用户ID：'. $model->user_id;
                        }
                        return $model->users->showName. '|'. $model->users->mobile_phone;
                    },
                ],
                [
                    'attribute' => 'servicer',
                    'value' => function ($model) {
                        if (empty($model['users']['servicerUser']['supserServicerUser'])) {
                            if (empty($model['users']['servicerUser'])) {
                                return null;
                            } else {
                                return $model['users']['servicerUser']['user_name'];
                            }
                        } else {
                            return $model['users']['servicerUser']['supserServicerUser']['user_name'];
                        }
                    }
                ],
                [
                    'attribute' => 'create_time',
                    'value' => function ($model) {
                        return DateTimeHelper::getFormatCNDateTime($model->create_time);
                    }
                ],
                [
                    'attribute' => 'group_status',
                    'value' => function ($model) {
                        return OrderGroup::$order_group_status[$model->group_status];
                    }
                ],
                'consignee',
                [
                    'attribute' => 'province',
                    'value' => function ($model) {
                        if (empty($model->provinceRegion)) {
                            return '';
                        }
                        return $model->provinceRegion->region_name;
                    }
                ],
                [
                    'attribute' => 'city',
                    'value' => function ($model) {
                        if (empty($model->cityRegion)) {
                            return '';
                        }
                        return $model->cityRegion->region_name;
                    }
                ],
                [
                    'attribute' => 'district',
                    'value' => function ($model) {
                        if (empty($model->districtRegion)) {
                            return '';
                        }
                        return $model->districtRegion->region_name;
                    }
                ],
                'address',
                'mobile',
                'goods_amount',
                'shipping_fee',
                'money_paid',
                'order_amount',
                'discount',
                [
                    'attribute' => 'event_id',
                    'value' => function ($model) {
                        if (empty($model->event)) {
                            return '';
                        }
                        return $model->event->event_name;
                    }
                ],
                [
                    'attribute' => 'rule_id',
                    'value' => function ($model) {
                        if (empty($model->fullCutRule)) {
                            return '';
                        }
                        return $model->fullCutRule->rule_name;
                    }
                ],
                [
                    'attribute' => 'pay_time',
                    'value' => function ($model) {
                        return DateTimeHelper::getFormatCNDateTime($model->pay_time);
                    }
                ],
                [
                    'attribute' => 'shipping_time',
                    'value' => function ($model) {
                        return DateTimeHelper::getFormatCNDateTime($model->shipping_time);
                    }
                ],
                [
                    'attribute' => 'recv_time',
                    'value' => function ($model) {
                        return DateTimeHelper::getFormatCNDateTime($model->recv_time);
                    }
                ],
                [
                    'attribute' => 'divide_amount',
                    'value' => function ($model) {
                        return $model->getAlreadyDivide();
                    }
                ],
                [
                    'attribute' => 'goods',
                    'value' => function ($model) {
                        $result = '';
                        foreach ($model->orders as $order) {
                            foreach ($order->ordergoods as $ordergood) {
                                $result .= '商品名:'. $ordergood->goods_name;
                                $result .= ',商品货号:'. $ordergood->goods_sn;
                                $result .= ',商品单价:'. $ordergood->goods_price;
                                $result .= ',商品数量:'. $ordergood->goods_number;
                                $result .= ',商品总价:'. $ordergood->goods_price * $ordergood->goods_number;
                                $result .= PHP_EOL;
                            }
                        }
                        return $result;
                    }
                ],
            ], //without header working, because the header will be get label from attribute label.
            'headers' => [
                'group_id' => '总单号',
                'user_id' => '用户名',
                'servicer' => '所属服务商',
                'create_time' => '下单时间',
                'group_status' => '总单状态',
                'consignee' => '收货人',
                'province' => '省',
                'city' => '市',
                'district' => '区',
                'address' => '详细地址',
                'mobile' => '收货人手机号码',
                'goods_amount' => '商品总金额',
                'shipping_fee' => '运费',
                'money_paid' => '已付款金额',
                'order_amount' => '待付款金额',
                'discount' => '折扣金额',
                'event_id' => '活动名称',
                'rule_id' => '满减规则名称',
                'pay_time' => '支付时间',
                'shipping_time' => '发货时间',
                'recv_time' => '收货时间',
                'divide_amount' => '分成金额',
                'goods' => '订单商品',
            ],
        ]);
    }

    public function exportDivide($params) {
        $query = OrderGroup::find()->joinWith([
            'users users',
            'users.servicerUser servicerUser',
            'users.servicerUser.supserServicerUser supserServicerUser',
            'orders orders',
            'orders.ordergoods ordergoods',
            'provinceRegion provinceRegion',
            'cityRegion cityRegion',
            'districtRegion districtRegion',
            'servicerDivideRecord servicerDivideRecord',
            'servicerDivideRecord.cashRecord cashRecord',
            'deliveryOrders deliveryOrders',
            'event event',
        ]);

        $this->load($params);

        // grid filtering conditions
        $query->andFilterWhere([
            OrderGroup::tableName().'.id' => $this->id,
            OrderGroup::tableName().'.user_id' => $this->user_id,
            OrderGroup::tableName().'.create_time' => $this->create_time,
            OrderGroup::tableName().'.group_status' => $this->group_status,
            OrderGroup::tableName().'.country' => $this->country,
            OrderGroup::tableName().'.province' => $this->province,
            OrderGroup::tableName().'.city' => $this->city,
            OrderGroup::tableName().'.district' => $this->district,
            OrderGroup::tableName().'.pay_id' => $this->pay_id,
            OrderGroup::tableName().'.goods_amount' => $this->goods_amount,
            OrderGroup::tableName().'.shipping_fee' => $this->shipping_fee,
            OrderGroup::tableName().'.money_paid' => $this->money_paid,
            OrderGroup::tableName().'.order_amount' => $this->order_amount,
            OrderGroup::tableName().'.pay_time' => $this->pay_time,
            OrderGroup::tableName().'.shipping_time' => $this->shipping_time,
            OrderGroup::tableName().'.recv_time' => $this->recv_time,
            OrderGroup::tableName().'.discount' => $this->discount,
            'users.province' => $this->user_province,
        ]);

        $userRegionList = Yii::$app->user->identity['userRegion'];
        if (!empty($userRegionList)) {
            $regionIds = [];
            foreach ($userRegionList as $userRegion) {
                $regionIds[] = $userRegion['region_id'];
            }

            $query->andFilterWhere([
                'or',
                [
                    'users.province' => $regionIds
                ],
                [
                    'users.city' => $regionIds
                ],
            ]);
        }

        $query->andFilterWhere(['like', OrderGroup::tableName().'.group_id', $this->group_id])
            ->andFilterWhere(['like', 'consignee', $this->consignee])
            ->andFilterWhere(['like', 'address', $this->address])
            ->andFilterWhere(['like', 'mobile', $this->mobile])
            ->andFilterWhere(['like', 'pay_name', $this->pay_name]);

        $add_time_start = 0;
        if (!empty($this->add_time_start)) {
            $add_time_start = DateTimeHelper::getFormatGMTTimesTimestamp($this->add_time_start);
        }

        $add_time_end = DateTimeHelper::getFormatCNTimesTimestamp();
        if (!empty($this->add_time_end)) {
            $add_time_end = DateTimeHelper::getFormatGMTTimesTimestamp($this->add_time_end) + 86399;
        }

        $query->andFilterWhere(['between', 'create_time', $add_time_start, $add_time_end]);

        $orderGroupList = $query->all();

        \moonland\phpexcel\Excel::export([
            'format' => 'Excel5',
            'fileName' => '总单导出('. date('YmdHis'). ')',
            'models' => $orderGroupList,
            'columns' => [
                'group_id',
                [
                    'attribute' => 'user_id',
                    'value' => function ($model) {
                        if (empty($model->users)) {
                            return '用户ID：'. $model->user_id;
                        }
                        return $model->users->showName. '|'. $model->users->mobile_phone;
                    },
                ],
                [
                    'attribute' => 'servicer',
                    'value' => function ($model) {
                        if (empty($model['users']['servicerUser']['supserServicerUser'])) {
                            if (empty($model['users']['servicerUser'])) {
                                return null;
                            } else {
                                return $model['users']['servicerUser']['user_name'];
                            }
                        } else {
                            return $model['users']['servicerUser']['supserServicerUser']['user_name'];
                        }
                    }
                ],
                [
                    'attribute' => 'create_time',
                    'value' => function ($model) {
                        return DateTimeHelper::getFormatCNDateTime($model->create_time);
                    }
                ],
                [
                    'attribute' => 'group_status',
                    'value' => function ($model) {
                        return OrderGroup::$order_group_status[$model->group_status];
                    }
                ],
                'goods_amount',
                'shipping_fee',
                'money_paid',
                'order_amount',
                'discount',
                [
                    'attribute' => 'recv_time',
                    'value' => function ($model) {
                        return DateTimeHelper::getFormatCNDateTime($model->recv_time);
                    }
                ],
                [
                    'attribute' => 'divide_amount',
                    'value' => function ($model) {
                        return $model->getAlreadyDivide();
                    }
                ],
                [
                    'attribute' => 'cost',
                    'value' => function ($model) {
                        return $model->getTotalCost();
                    }
                ],
                [
                    'attribute' => 'profit',
                    'value' => function ($model) {
                        return $model->getProfit();
                    }
                ],
                [
                    'attribute' => 'goods',
                    'value' => function ($model) {
                        $result = '';
                        foreach ($model->orders as $order) {
                            foreach ($order->ordergoods as $ordergood) {
                                $result .= '商品ID:'. $ordergood->goods_id;
                                $result .= ', 商品货号:'. $ordergood->goods_sn;
                                $result .= ', 商品单价:'. $ordergood->goods_price;
                                $result .= ', 商品数量:'. $ordergood->goods_number;
                                $result .= ', 发货数量:'. $ordergood->send_number;
                                $result .= ', 成本价:'. (isset($ordergood->goods) ? $ordergood->goods->getSupplyPrice() : 0);
                                $result .= PHP_EOL;
                            }
                        }
                        return $result;
                    }
                ],
                [
                    'attribute' => 'delivery',
                    'value' => function ($model) {
                        $result = '';
                        foreach ($model->deliveryOrders as $deliveryOrder) {
                            $result .= '物流单：'. $deliveryOrder->invoice_no;
                            $result .= ', 运费：'. $deliveryOrder->shipping_fee;
                            $result .= PHP_EOL;
                        }
                        return $result;
                    }
                ],
            ], //without header working, because the header will be get label from attribute label.
            'headers' => [
                'group_id' => '总单号',
                'user_id' => '用户名',
                'servicer' => '所属服务商',
                'create_time' => '下单时间',
                'group_status' => '总单状态',
                'goods_amount' => '商品总金额',
                'shipping_fee' => '运费',
                'money_paid' => '已付款金额',
                'order_amount' => '待付款金额',
                'discount' => '折扣金额',
                'recv_time' => '收货时间',
                'divide_amount' => '分成金额',
                'cost' => '总成本',
                'profit' => '利润',
                'goods' => '商品',
                'delivery' => '发货信息',
            ],
        ]);
    }
}
